#ifndef EXAMPLE_INTERACTIONS_B04B9A5C285D5BA79602F1B5C5BE9CD08FE18409
#define EXAMPLE_INTERACTIONS_B04B9A5C285D5BA79602F1B5C5BE9CD08FE18409

// ======================================================================
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ----------------------------------------------------------------------
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// This source file has been generated by Atlas Interaction Generator v0.1.0
// https://github.com/jodyhagins/Atlas
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// ----------------------------------------------------------------------
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ======================================================================
#ifndef WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90
#define WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90

// This is boilerplate that is part of every Atlas interaction file.
// Nothing to see here, move along.

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
#include <compare>
#endif
#include <type_traits>
#include <utility>

namespace atlas {

struct strong_type_tag
{
#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    friend auto operator <=> (
        strong_type_tag const &,
        strong_type_tag const &) = default;
#endif
};

struct value_tag
{ };

namespace atlas_detail {

template <typename... Ts>
struct make_void
{
    using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename T, typename = void>
struct IsAtlasType
: std::false_type
{ };

template <typename T>
struct IsAtlasType<T, void_t<typename T::atlas_value_type>>
: std::true_type
{ };

template <std::size_t N>
struct PriorityTag
: PriorityTag<N - 1>
{ };

template <>
struct PriorityTag<0u>
{ };

using value_tag = PriorityTag<3>;

template <bool B>
using bool_c = std::integral_constant<bool, B>;
template <typename T>
using bool_ = bool_c<T::value>;
template <typename T>
using not_ = bool_c<not T::value>;
template <typename T, typename U>
using and_ = bool_c<T::value && U::value>;
template <typename T>
using is_lref = std::is_lvalue_reference<T>;
template <typename T, typename U = void>
using enable_if = typename std::enable_if<T::value, U>::type;

template <typename T>
using _t = typename T::type;

void atlas_value();

template <typename T>
constexpr T &
value(T & val, PriorityTag<0>)
{
    return val;
}

template <typename T, typename U = typename T::atlas_value_type>
using val_t = _t<std::conditional<std::is_const<T>::value, U const &, U &>>;

template <typename T, typename U = val_t<T>>
constexpr auto
value(T & val, PriorityTag<1>)
-> decltype(atlas::atlas_detail::value(static_cast<U>(val), value_tag{}))
{
    return atlas::atlas_detail::value(static_cast<U>(val), value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<2>)
-> decltype(atlas_value(t, atlas::value_tag{}))
{
    return atlas_value(t, atlas::value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<3>)
-> decltype(atlas_value(t))
{
    return atlas_value(t);
}

class Value
{
    template <
        typename U,
        typename T,
        typename V = _t<std::conditional<is_lref<U &&>::value, T &, T>>>
    static constexpr V rval(T && t)
    {
        return t;
    }

public:
    template <typename T>
    constexpr auto operator () (T && t) const
    -> decltype(rval<T>(atlas_detail::value(t, atlas_detail::value_tag{})))
    {
        return rval<T>(atlas_detail::value(t, atlas_detail::value_tag{}));
    }
};

} // namespace atlas_detail

#if defined(__cpp_inline_variables) && __cpp_inline_variables >= 201606L
inline constexpr auto value = atlas_detail::Value{};
#else
template <typename T>
constexpr auto
value(T && t)
-> decltype(atlas_detail::Value{}(std::forward<T>(t)))
{
    return atlas_detail::Value{}(std::forward<T>(t));
}
#endif

} // namespace atlas

#endif // WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////


// Custom value accessors for non-Atlas types
// These allow atlas::value() to work with external library types
// Users can override by providing atlas_value(T const&) without the tag parameter
namespace atlas {
inline auto
atlas_value(::concurrency::ThreadId const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::data::ByteCount const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::finance::core::Money const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::geo::Latitude const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::geo::Longitude const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::graphics::color::RedChannel const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::math::rational::Denominator const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::math::rational::Numerator const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::net::ipv4::Octet const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::physics::units::Meters const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::physics::units::MetersPerSecond const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::physics::units::Seconds const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

inline constexpr auto
atlas_value(::security::EncryptedData const& v, value_tag)
-> decltype(v.value)
{
    return v.value;
}

} // namespace atlas


// Compound assignment operators for cross-type interactions
// These use ADL to be found automatically for atlas strong types
// The decltype ensures they only match when the binary operator is defined
namespace atlas {

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_modulo
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_modulo<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) %=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_modulo(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) %= atlas::value(rhs)))
{
    atlas::value(lhs) %= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_modulo(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs % rhs)))
{
    atlas::value(lhs) = atlas::value(lhs % rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator%=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_modulo(
    lhs,
    rhs,
    atlas_detail::has_compound_op_modulo<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_modulo(
    lhs,
    rhs,
    atlas_detail::has_compound_op_modulo<L, R>{}))
{
    return atlas_detail::compound_assign_impl_modulo(
        lhs,
        rhs,
        atlas_detail::has_compound_op_modulo<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_bitand
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_bitand<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) &=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_bitand(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) &= atlas::value(rhs)))
{
    atlas::value(lhs) &= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_bitand(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs & rhs)))
{
    atlas::value(lhs) = atlas::value(lhs & rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator&=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_bitand(
    lhs,
    rhs,
    atlas_detail::has_compound_op_bitand<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_bitand(
    lhs,
    rhs,
    atlas_detail::has_compound_op_bitand<L, R>{}))
{
    return atlas_detail::compound_assign_impl_bitand(
        lhs,
        rhs,
        atlas_detail::has_compound_op_bitand<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_times
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_times<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) *=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_times(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) *= atlas::value(rhs)))
{
    atlas::value(lhs) *= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_times(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs * rhs)))
{
    atlas::value(lhs) = atlas::value(lhs * rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator*=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_times(
    lhs,
    rhs,
    atlas_detail::has_compound_op_times<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_times(
    lhs,
    rhs,
    atlas_detail::has_compound_op_times<L, R>{}))
{
    return atlas_detail::compound_assign_impl_times(
        lhs,
        rhs,
        atlas_detail::has_compound_op_times<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_plus
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_plus<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) +=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_plus(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) += atlas::value(rhs)))
{
    atlas::value(lhs) += atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_plus(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs + rhs)))
{
    atlas::value(lhs) = atlas::value(lhs + rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator+=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_plus(
    lhs,
    rhs,
    atlas_detail::has_compound_op_plus<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_plus(
    lhs,
    rhs,
    atlas_detail::has_compound_op_plus<L, R>{}))
{
    return atlas_detail::compound_assign_impl_plus(
        lhs,
        rhs,
        atlas_detail::has_compound_op_plus<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_minus
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_minus<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) -=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_minus(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) -= atlas::value(rhs)))
{
    atlas::value(lhs) -= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_minus(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs - rhs)))
{
    atlas::value(lhs) = atlas::value(lhs - rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator-=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_minus(
    lhs,
    rhs,
    atlas_detail::has_compound_op_minus<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_minus(
    lhs,
    rhs,
    atlas_detail::has_compound_op_minus<L, R>{}))
{
    return atlas_detail::compound_assign_impl_minus(
        lhs,
        rhs,
        atlas_detail::has_compound_op_minus<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_divide
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_divide<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) /=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_divide(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) /= atlas::value(rhs)))
{
    atlas::value(lhs) /= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_divide(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs / rhs)))
{
    atlas::value(lhs) = atlas::value(lhs / rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator/=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_divide(
    lhs,
    rhs,
    atlas_detail::has_compound_op_divide<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_divide(
    lhs,
    rhs,
    atlas_detail::has_compound_op_divide<L, R>{}))
{
    return atlas_detail::compound_assign_impl_divide(
        lhs,
        rhs,
        atlas_detail::has_compound_op_divide<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_lshift
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_lshift<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) <<=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_lshift(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) <<= atlas::value(rhs)))
{
    atlas::value(lhs) <<= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_lshift(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs << rhs)))
{
    atlas::value(lhs) = atlas::value(lhs << rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator<<=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_lshift(
    lhs,
    rhs,
    atlas_detail::has_compound_op_lshift<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_lshift(
    lhs,
    rhs,
    atlas_detail::has_compound_op_lshift<L, R>{}))
{
    return atlas_detail::compound_assign_impl_lshift(
        lhs,
        rhs,
        atlas_detail::has_compound_op_lshift<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_rshift
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_rshift<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) >>=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_rshift(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) >>= atlas::value(rhs)))
{
    atlas::value(lhs) >>= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_rshift(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs >> rhs)))
{
    atlas::value(lhs) = atlas::value(lhs >> rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator>>=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_rshift(
    lhs,
    rhs,
    atlas_detail::has_compound_op_rshift<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_rshift(
    lhs,
    rhs,
    atlas_detail::has_compound_op_rshift<L, R>{}))
{
    return atlas_detail::compound_assign_impl_rshift(
        lhs,
        rhs,
        atlas_detail::has_compound_op_rshift<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_bitxor
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_bitxor<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) ^=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_bitxor(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) ^= atlas::value(rhs)))
{
    atlas::value(lhs) ^= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_bitxor(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs ^ rhs)))
{
    atlas::value(lhs) = atlas::value(lhs ^ rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator^=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_bitxor(
    lhs,
    rhs,
    atlas_detail::has_compound_op_bitxor<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_bitxor(
    lhs,
    rhs,
    atlas_detail::has_compound_op_bitxor<L, R>{}))
{
    return atlas_detail::compound_assign_impl_bitxor(
        lhs,
        rhs,
        atlas_detail::has_compound_op_bitxor<L, R>{});
}

namespace atlas_detail {
template <typename L, typename R, typename = void>
struct has_compound_op_bitor
: std::false_type
{ };

template <typename L, typename R>
struct has_compound_op_bitor<
    L,
    R,
    decltype((void)(atlas::value(std::declval<L&>()) |=
        atlas::value(std::declval<R const&>())))>
: std::true_type
{ };

template <typename L, typename R>
constexpr L &
compound_assign_impl_bitor(L & lhs, R const & rhs, std::true_type)
noexcept(noexcept(atlas::value(lhs) |= atlas::value(rhs)))
{
    atlas::value(lhs) |= atlas::value(rhs);
    return lhs;
}

template <typename L, typename R>
constexpr L &
compound_assign_impl_bitor(L & lhs, R const & rhs, std::false_type)
noexcept(noexcept(atlas::value(lhs) = atlas::value(lhs | rhs)))
{
    atlas::value(lhs) = atlas::value(lhs | rhs);
    return lhs;
}
}

template <
    typename L,
    typename R,
    typename std::enable_if<
        std::is_base_of<atlas::strong_type_tag, L>::value,
        bool>::type = true>
inline auto
operator|=(L & lhs, R const & rhs)
noexcept(noexcept(atlas_detail::compound_assign_impl_bitor(
    lhs,
    rhs,
    atlas_detail::has_compound_op_bitor<L, R>{})))
-> decltype(atlas_detail::compound_assign_impl_bitor(
    lhs,
    rhs,
    atlas_detail::has_compound_op_bitor<L, R>{}))
{
    return atlas_detail::compound_assign_impl_bitor(
        lhs,
        rhs,
        atlas_detail::has_compound_op_bitor<L, R>{});
}

} // namespace atlas


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////
inline constexpr finance::core::Money
operator*(physics::units::Meters lhs, finance::core::Money rhs)
noexcept(noexcept(lhs.value * rhs.value))
{
    return finance::core::Money{lhs.value * rhs.value};
}

namespace app::config {

inline constexpr ConfigKey
operator+(ConfigKey lhs, std::string rhs)
noexcept(noexcept(lhs.value + rhs))
{
    return ConfigKey{lhs.value + rhs};
}

inline constexpr ConfigKey
operator+(std::string lhs, ConfigKey rhs)
noexcept(noexcept(lhs + atlas::value(rhs)))
{
    return ConfigKey{lhs + atlas::value(rhs)};
}

} // namespace app::config

namespace concurrency {

inline ThreadId
operator+(ThreadId lhs, ThreadId rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return ThreadId{lhs.value + rhs.value};
}

} // namespace concurrency

namespace data {

inline constexpr ByteCount
operator+(ByteCount lhs, ByteCount rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return ByteCount{lhs.value + rhs.value};
}

inline constexpr ByteCount
operator-(ByteCount lhs, ByteCount rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return ByteCount{lhs.value - rhs.value};
}

inline constexpr ByteCount
operator*(ByteCount lhs, size_t rhs)
noexcept(noexcept(lhs.value * rhs))
{
    return ByteCount{lhs.value * rhs};
}

inline constexpr ByteCount
operator/(ByteCount lhs, size_t rhs)
noexcept(noexcept(lhs.value / rhs))
{
    return ByteCount{lhs.value / rhs};
}

inline constexpr ByteCount
operator%(ByteCount lhs, ByteCount rhs)
noexcept(noexcept(lhs.value % rhs.value))
{
    return ByteCount{lhs.value % rhs.value};
}

} // namespace data

namespace finance::core {

inline constexpr Money
operator+(Money lhs, Money rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return Money{lhs.value + rhs.value};
}

inline constexpr Money
operator-(Money lhs, Money rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return Money{lhs.value - rhs.value};
}

inline constexpr Money
operator*(Money lhs, double rhs)
noexcept(noexcept(lhs.value * rhs))
{
    return Money{lhs.value * rhs};
}

inline constexpr Money
operator/(Money lhs, double rhs)
noexcept(noexcept(lhs.value / rhs))
{
    return Money{lhs.value / rhs};
}

inline constexpr double
operator/(Money lhs, Money rhs)
noexcept(noexcept(lhs.value / rhs.value))
{
    return double{lhs.value / rhs.value};
}

} // namespace finance::core

namespace geo {

inline constexpr Latitude
operator+(Latitude lhs, double rhs)
noexcept(noexcept(lhs.value + rhs))
{
    return Latitude{lhs.value + rhs};
}

inline constexpr Longitude
operator+(Longitude lhs, double rhs)
noexcept(noexcept(lhs.value + rhs))
{
    return Longitude{lhs.value + rhs};
}

inline constexpr double
operator-(Latitude lhs, Latitude rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return double{lhs.value - rhs.value};
}

inline constexpr double
operator-(Longitude lhs, Longitude rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return double{lhs.value - rhs.value};
}

} // namespace geo

namespace graphics::color {

inline constexpr RedChannel
operator+(RedChannel lhs, RedChannel rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return RedChannel{lhs.value + rhs.value};
}

inline constexpr RedChannel
operator|(RedChannel lhs, RedChannel rhs)
noexcept(noexcept(lhs.value | rhs.value))
{
    return RedChannel{lhs.value | rhs.value};
}

inline constexpr RedChannel
operator&(RedChannel lhs, RedChannel rhs)
noexcept(noexcept(lhs.value & rhs.value))
{
    return RedChannel{lhs.value & rhs.value};
}

inline constexpr RedChannel
operator^(RedChannel lhs, RedChannel rhs)
noexcept(noexcept(lhs.value ^ rhs.value))
{
    return RedChannel{lhs.value ^ rhs.value};
}

} // namespace graphics::color

namespace math {

template <std::integral T>
constexpr T
operator+(T lhs, T rhs)
noexcept(noexcept(lhs.value + atlas::value(rhs)))
{
    return T{lhs.value + atlas::value(rhs)};
}

template <typename U, typename std::enable_if<std::is_floating_point<U>::value, bool>::type = true>
constexpr U
operator*(U lhs, U rhs)
noexcept(noexcept(lhs.value * atlas::value(rhs)))
{
    return U{lhs.value * atlas::value(rhs)};
}

#if __cpp_concepts >= 201907L
template <std::integral V>
#else
template <typename V, typename std::enable_if<sizeof(V) <= 8, bool>::type = true>
#endif
constexpr V
operator-(V lhs, V rhs)
noexcept(noexcept(lhs.value - atlas::value(rhs)))
{
    return V{lhs.value - atlas::value(rhs)};
}

} // namespace math

namespace math::rational {

inline constexpr Numerator
operator+(Numerator lhs, Numerator rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return Numerator{lhs.value + rhs.value};
}

inline constexpr Numerator
operator-(Numerator lhs, Numerator rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return Numerator{lhs.value - rhs.value};
}

inline constexpr Numerator
operator*(Numerator lhs, Numerator rhs)
noexcept(noexcept(lhs.value * rhs.value))
{
    return Numerator{lhs.value * rhs.value};
}

inline constexpr Numerator
operator*(Numerator lhs, Denominator rhs)
noexcept(noexcept(lhs.value * rhs.value))
{
    return Numerator{lhs.value * rhs.value};
}

inline constexpr Denominator
operator*(Denominator lhs, Denominator rhs)
noexcept(noexcept(lhs.value * rhs.value))
{
    return Denominator{lhs.value * rhs.value};
}

} // namespace math::rational

namespace net::ipv4 {

inline constexpr Octet
operator&(Octet lhs, Octet rhs)
noexcept(noexcept(lhs.value & rhs.value))
{
    return Octet{lhs.value & rhs.value};
}

inline constexpr Octet
operator|(Octet lhs, Octet rhs)
noexcept(noexcept(lhs.value | rhs.value))
{
    return Octet{lhs.value | rhs.value};
}

inline constexpr Octet
operator^(Octet lhs, Octet rhs)
noexcept(noexcept(lhs.value ^ rhs.value))
{
    return Octet{lhs.value ^ rhs.value};
}

inline constexpr Octet
operator<<(Octet lhs, int rhs)
noexcept(noexcept(lhs.value << rhs))
{
    return Octet{lhs.value << rhs};
}

inline constexpr Octet
operator>>(Octet lhs, int rhs)
noexcept(noexcept(lhs.value >> rhs))
{
    return Octet{lhs.value >> rhs};
}

} // namespace net::ipv4

namespace physics::units {

inline constexpr Meters
operator+(Meters lhs, Meters rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return Meters{lhs.value + rhs.value};
}

inline constexpr Meters
operator-(Meters lhs, Meters rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return Meters{lhs.value - rhs.value};
}

inline constexpr Meters
operator*(Meters lhs, double rhs)
noexcept(noexcept(lhs.value * rhs))
{
    return Meters{lhs.value * rhs};
}

inline constexpr Meters
operator*(double lhs, Meters rhs)
noexcept(noexcept(lhs * rhs.value))
{
    return Meters{lhs * rhs.value};
}

inline constexpr Meters
operator/(Meters lhs, double rhs)
noexcept(noexcept(lhs.value / rhs))
{
    return Meters{lhs.value / rhs};
}

inline constexpr double
operator/(Meters lhs, Meters rhs)
noexcept(noexcept(lhs.value / rhs.value))
{
    return double{lhs.value / rhs.value};
}

inline constexpr Seconds
operator+(Seconds lhs, Seconds rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return Seconds{lhs.value + rhs.value};
}

inline constexpr Seconds
operator-(Seconds lhs, Seconds rhs)
noexcept(noexcept(lhs.value - rhs.value))
{
    return Seconds{lhs.value - rhs.value};
}

inline constexpr Seconds
operator*(Seconds lhs, double rhs)
noexcept(noexcept(lhs.value * rhs))
{
    return Seconds{lhs.value * rhs};
}

inline constexpr Seconds
operator*(double lhs, Seconds rhs)
noexcept(noexcept(lhs * rhs.value))
{
    return Seconds{lhs * rhs.value};
}

inline constexpr Seconds
operator/(Seconds lhs, double rhs)
noexcept(noexcept(lhs.value / rhs))
{
    return Seconds{lhs.value / rhs};
}

inline constexpr double
operator/(Seconds lhs, Seconds rhs)
noexcept(noexcept(lhs.value / rhs.value))
{
    return double{lhs.value / rhs.value};
}

inline constexpr MetersPerSecond
operator/(Meters lhs, Seconds rhs)
noexcept(noexcept(lhs.value / rhs.value))
{
    return MetersPerSecond{lhs.value / rhs.value};
}

inline constexpr Meters
operator*(MetersPerSecond lhs, Seconds rhs)
noexcept(noexcept(lhs.value * rhs.value))
{
    return Meters{lhs.value * rhs.value};
}

inline constexpr Seconds
operator/(Meters lhs, MetersPerSecond rhs)
noexcept(noexcept(lhs.value / rhs.value))
{
    return Seconds{lhs.value / rhs.value};
}

} // namespace physics::units

namespace security {

inline constexpr EncryptedData
operator+(EncryptedData lhs, EncryptedData rhs)
noexcept(noexcept(lhs.value + rhs.value))
{
    return EncryptedData{lhs.value + rhs.value};
}

} // namespace security

#endif // EXAMPLE_INTERACTIONS_B04B9A5C285D5BA79602F1B5C5BE9CD08FE18409
