#ifndef EXAMPLE_DFF719F56EAABCC3D8D523E2BB55DE14FD8EF3D1
#define EXAMPLE_DFF719F56EAABCC3D8D523E2BB55DE14FD8EF3D1

// ======================================================================
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ----------------------------------------------------------------------
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// This source file has been generated by Atlas Strong Type Generator v0.1.0
// https://github.com/jodyhagins/Atlas
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// ----------------------------------------------------------------------
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ======================================================================

#if __has_include(<version>)
#include <version>
#endif
#include <chrono>
#if defined(__cpp_concepts) && __cpp_concepts >= 201907L
#include <concepts>
#endif
#include <deque>
#if defined(__cpp_lib_format) && __cpp_lib_format >= 202110L
#include <format>
#endif
#include <functional>
#include <istream>
#include <map>
#include <memory>
#include <ostream>
#include <string>
#include <type_traits>
#include <utility>
#include <vector>

#ifndef WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90
#define WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90

// ======================================================================
// ATLAS STRONG TYPE BOILERPLATE
// ----------------------------------------------------------------------
//
// This section provides the infrastructure for Atlas strong types.
// It is identical across all Atlas-generated files and uses a shared
// header guard (WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90) to ensure
// the boilerplate is only included once even when multiple generated
// files are used in the same translation unit.
//
// The boilerplate is intentionally inlined to make generated code
// self-contained with zero external dependencies.
//
// Components:
// - atlas::strong_type_tag: Base class for strong types
// - atlas::value(): Universal value accessor for strong types
// - atlas_detail::*: Internal implementation utilities
//
// For projects using multiple Atlas-generated files, this boilerplate
// will only be compiled once per translation unit thanks to the shared
// header guard below.
//
// ----------------------------------------------------------------------
// DO NOT EDIT THIS SECTION
// ======================================================================

// Atlas feature detection macros
#ifndef ATLAS_NODISCARD
#if defined(__cpp_attributes) && __cpp_attributes >= 201603L
#define ATLAS_NODISCARD [[nodiscard]]
#else
#define ATLAS_NODISCARD
#endif
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
#include <compare>
#endif

namespace atlas {

struct strong_type_tag
{
#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    friend auto operator <=> (
        strong_type_tag const &,
        strong_type_tag const &) = default;
#endif
};

struct value_tag
{ };

namespace atlas_detail {

template <typename... Ts>
struct make_void
{
    using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename T, typename = void>
struct IsAtlasType
: std::false_type
{ };

template <typename T>
struct IsAtlasType<T, void_t<typename T::atlas_value_type>>
: std::true_type
{ };

template <std::size_t N>
struct PriorityTag
: PriorityTag<N - 1>
{ };

template <>
struct PriorityTag<0u>
{ };

using value_tag = PriorityTag<3>;

template <bool B>
using bool_c = std::integral_constant<bool, B>;
template <typename T>
using bool_ = bool_c<T::value>;
template <typename T>
using not_ = bool_c<not T::value>;
template <typename T, typename U>
using and_ = bool_c<T::value && U::value>;
template <typename T>
using is_lref = std::is_lvalue_reference<T>;
template <typename T, typename U = void>
using enable_if = typename std::enable_if<T::value, U>::type;

template <typename T>
using _t = typename T::type;

void atlas_value();

template <typename T>
constexpr T &
value(T & val, PriorityTag<0>)
{
    return val;
}

template <typename T, typename U = typename T::atlas_value_type>
using val_t = _t<std::conditional<std::is_const<T>::value, U const &, U &>>;

template <typename T, typename U = val_t<T>>
constexpr auto
value(T & val, PriorityTag<1>)
-> decltype(atlas::atlas_detail::value(static_cast<U>(val), value_tag{}))
{
    return atlas::atlas_detail::value(static_cast<U>(val), value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<2>)
-> decltype(atlas_value(t, atlas::value_tag{}))
{
    return atlas_value(t, atlas::value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<3>)
-> decltype(atlas_value(t))
{
    return atlas_value(t);
}

class Value
{
    template <
        typename U,
        typename T,
        typename V = _t<std::conditional<is_lref<U &&>::value, T &, T>>>
    static constexpr V rval(T && t)
    {
        return t;
    }

public:
    template <typename T>
    constexpr auto operator () (T && t) const
    -> decltype(rval<T>(atlas_detail::value(t, atlas_detail::value_tag{})))
    {
        return rval<T>(atlas_detail::value(t, atlas_detail::value_tag{}));
    }
};

void begin();
void end();

template <typename T>
constexpr auto
begin_(T && t) noexcept(noexcept(begin(std::forward<T>(t))))
-> decltype(begin(std::forward<T>(t)))
{
    return begin(std::forward<T>(t));
}

template <typename T>
constexpr auto
end_(T && t) noexcept(noexcept(end(std::forward<T>(t))))
-> decltype(end(std::forward<T>(t)))
{
    return end(std::forward<T>(t));
}
struct const_
{
    template <typename T>
    static T const * _ (T * p) { return p; }
    template <typename T>
    static T const & _ (T const & p) { return p; }
};

struct mutable_
{
    template <typename T>
    static T * _ (T * p) { return p; }
    template <typename T>
    static T && _ (T && p) { return static_cast<T&&>(p); }
};
// Detects if T is a pointer or pointer-like type (has operator->)

template <typename T, typename U>
auto
arrow_impl(U & u, PriorityTag<1>)
-> decltype(T::_(u.operator->()))
{
    return T::_(u.operator->());
}

template <typename T, typename U>
auto
arrow_impl(U * u, PriorityTag<1>)
-> decltype(T::_(u))
{
    return T::_(u);
}

template <typename T, typename U>
U * arrow_impl(U & u, PriorityTag<0>)
{
    return std::addressof(u);
}
// Detects if T is dereferenceable (pointers, smart pointers, iterators, optional)

template <typename T, typename U>
auto
star_impl(U & u, PriorityTag<1>)
-> decltype(T::_(u.operator*()))
{
    return T::_(u.operator*());
}

template <typename T, typename U>
auto
star_impl(U * u, PriorityTag<1>)
-> decltype(*T::_(u))
{
    return *T::_(u);
}

template <typename T, typename U>
U & star_impl(U & u, PriorityTag<0>)
{
    return u;
}

} // namespace atlas_detail

#if defined(__cpp_inline_variables) && __cpp_inline_variables >= 201606L
inline constexpr auto value = atlas_detail::Value{};
#else
template <typename T>
constexpr auto
value(T && t)
-> decltype(atlas_detail::Value{}(std::forward<T>(t)))
{
    return atlas_detail::Value{}(std::forward<T>(t));
}
#endif

} // namespace atlas

#endif // WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////


namespace demo {
namespace profiles {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::profiles
 * - type_name: Price
 * - description: strong double; !=, *, +, -, /, <, <=, ==, >, >=, hash
 * - default_value: "0.0"
 */
struct Price
: private atlas::strong_type_tag
{
    double value{0.0};

    using atlas_value_type = double;

    constexpr explicit Price() = default;
    constexpr Price(Price const &) = default;
    constexpr Price(Price &&) = default;
    constexpr Price & operator = (Price const &) = default;
    constexpr Price & operator = (Price &&) = default;
    constexpr ~Price() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Price(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Price & operator *= (
        Price & lhs,
        Price const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Price operator * (
        Price lhs,
        Price const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Price & operator += (
        Price & lhs,
        Price const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Price operator + (
        Price lhs,
        Price const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Price & operator -= (
        Price & lhs,
        Price const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Price operator - (
        Price lhs,
        Price const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Price & operator /= (
        Price & lhs,
        Price const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Price operator / (
        Price lhs,
        Price const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() != std::declval<double const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() < std::declval<double const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() <= std::declval<double const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() == std::declval<double const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() > std::declval<double const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() >= std::declval<double const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace profiles
} // namespace demo


/**
 * @brief std::hash specialization for demo::profiles::Price
 *
 * Delegates to std::hash of the underlying type double
 */
template <>
struct std::hash<demo::profiles::Price>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (demo::profiles::Price const & t) const
    noexcept(
        noexcept(std::hash<double>{}(
            std::declval<double const &>())))
    {
        return std::hash<double>{}(
            static_cast<double const &>(t));
    }
};

namespace demo {
namespace profiles {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::profiles
 * - type_name: Quantity
 * - description: strong int; !=, *, +, -, /, ==, hash
 * - default_value: "0"
 */
struct Quantity
: private atlas::strong_type_tag
{
    int value{0};

    using atlas_value_type = int;

    constexpr explicit Quantity() = default;
    constexpr Quantity(Quantity const &) = default;
    constexpr Quantity(Quantity &&) = default;
    constexpr Quantity & operator = (Quantity const &) = default;
    constexpr Quantity & operator = (Quantity &&) = default;
    constexpr ~Quantity() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Quantity(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator *= (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() *= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Quantity operator * (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator += (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() += std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Quantity operator + (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator -= (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() -= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Quantity operator - (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator /= (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() /= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Quantity operator / (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Quantity const & lhs,
        Quantity const & rhs)
    noexcept(noexcept(std::declval<int const&>() != std::declval<int const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Quantity const & lhs,
        Quantity const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace profiles
} // namespace demo


/**
 * @brief std::hash specialization for demo::profiles::Quantity
 *
 * Delegates to std::hash of the underlying type int
 */
template <>
struct std::hash<demo::profiles::Quantity>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (demo::profiles::Quantity const & t) const
    noexcept(
        noexcept(std::hash<int>{}(
            std::declval<int const &>())))
    {
        return std::hash<int>{}(
            static_cast<int const &>(t));
    }
};

namespace demo {
namespace profiles {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::profiles
 * - type_name: Identifier
 * - description: strong std::string; !=, ==, hash, in, out
 * - default_value: ""
 */
struct Identifier
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit Identifier() = default;
    constexpr Identifier(Identifier const &) = default;
    constexpr Identifier(Identifier &&) = default;
    constexpr Identifier & operator = (Identifier const &) = default;
    constexpr Identifier & operator = (Identifier &&) = default;
    constexpr ~Identifier() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Identifier(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Identifier const & lhs,
        Identifier const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Identifier const & lhs,
        Identifier const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Insert the wrapped object into an ostream.
     */
    friend std::ostream & operator << (
        std::ostream & strm,
        Identifier const & t)
    {
        return strm << t.value;
    }

    /**
     * Extract the wrapped object from an istream.
     */
    friend std::istream & operator >> (
        std::istream & strm,
        Identifier & t)
    {
        return strm >> t.value;
    }
};
} // namespace profiles
} // namespace demo


/**
 * @brief std::hash specialization for demo::profiles::Identifier
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<demo::profiles::Identifier>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (demo::profiles::Identifier const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};

namespace finance {
namespace core {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: finance::core
 * - type_name: Money
 * - description: strong double; !=, *, +, -, /, <, <<, <=, ==, >, >=, hash
 * - default_value: "0.0"
 */
struct Money
: private atlas::strong_type_tag
{
    double value{0.0};

    using atlas_value_type = double;

    constexpr explicit Money() = default;
    constexpr Money(Money const &) = default;
    constexpr Money(Money &&) = default;
    constexpr Money & operator = (Money const &) = default;
    constexpr Money & operator = (Money &&) = default;
    constexpr ~Money() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Money(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Money & operator *= (
        Money & lhs,
        Money const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Money operator * (
        Money lhs,
        Money const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Money & operator += (
        Money & lhs,
        Money const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Money operator + (
        Money lhs,
        Money const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Money & operator -= (
        Money & lhs,
        Money const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Money operator - (
        Money lhs,
        Money const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Money & operator /= (
        Money & lhs,
        Money const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Money operator / (
        Money lhs,
        Money const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr Money & operator <<= (
        Money & lhs,
        Money const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() <<= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr Money operator << (
        Money lhs,
        Money const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Money const & lhs,
        Money const & rhs)
    noexcept(noexcept(std::declval<double const&>() != std::declval<double const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        Money const & lhs,
        Money const & rhs)
    noexcept(noexcept(std::declval<double const&>() < std::declval<double const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        Money const & lhs,
        Money const & rhs)
    noexcept(noexcept(std::declval<double const&>() <= std::declval<double const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Money const & lhs,
        Money const & rhs)
    noexcept(noexcept(std::declval<double const&>() == std::declval<double const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        Money const & lhs,
        Money const & rhs)
    noexcept(noexcept(std::declval<double const&>() > std::declval<double const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        Money const & lhs,
        Money const & rhs)
    noexcept(noexcept(std::declval<double const&>() >= std::declval<double const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace core
} // namespace finance


/**
 * @brief std::hash specialization for finance::core::Money
 *
 * Delegates to std::hash of the underlying type double
 */
template <>
struct std::hash<finance::core::Money>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (finance::core::Money const & t) const
    noexcept(
        noexcept(std::hash<double>{}(
            std::declval<double const &>())))
    {
        return std::hash<double>{}(
            static_cast<double const &>(t));
    }
};

namespace ids {
namespace v1 {

/**
 * @brief Strong type wrapper for unsigned long
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: ids::v1
 * - type_name: UserId
 * - description: strong unsigned long; !=, <=>, ==, hash, no-constexpr-hash
 * - default_value: "0"
 */
class UserId
: private atlas::strong_type_tag
{
    unsigned long value{0};

public:
    using atlas_value_type = unsigned long;

    constexpr explicit UserId() = default;
    constexpr UserId(UserId const &) = default;
    constexpr UserId(UserId &&) = default;
    constexpr UserId & operator = (UserId const &) = default;
    constexpr UserId & operator = (UserId &&) = default;
    constexpr ~UserId() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<unsigned long, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit UserId(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator unsigned long const & () const { return value; }
    constexpr explicit operator unsigned long & () { return value; }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        UserId const &,
        UserId const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        UserId const & lhs,
        UserId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const &>() <
        std::declval<unsigned long const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        UserId const & lhs,
        UserId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const &>() <=
        std::declval<unsigned long const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        UserId const & lhs,
        UserId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const &>() >
        std::declval<unsigned long const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        UserId const & lhs,
        UserId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const &>() >=
        std::declval<unsigned long const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        UserId const &,
        UserId const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        UserId const & lhs,
        UserId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const &>() ==
        std::declval<unsigned long const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        UserId const & lhs,
        UserId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const &>() !=
        std::declval<unsigned long const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace v1
} // namespace ids


/**
 * @brief std::hash specialization for ids::v1::UserId
 *
 * Delegates to std::hash of the underlying type unsigned long
 */
template <>
struct std::hash<ids::v1::UserId>
{
    ATLAS_NODISCARD
    std::size_t operator () (ids::v1::UserId const & t) const
    noexcept(
        noexcept(std::hash<unsigned long>{}(
            std::declval<unsigned long const &>())))
    {
        return std::hash<unsigned long>{}(
            static_cast<unsigned long const &>(t));
    }
};

namespace physics {
namespace units {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: physics::units
 * - type_name: Meters
 * - description: strong double; !=, *, +, -, /, <=>, ==, u-
 * - default_value: ""
 */
struct Meters
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    constexpr explicit Meters() = default;
    constexpr Meters(Meters const &) = default;
    constexpr Meters(Meters &&) = default;
    constexpr Meters & operator = (Meters const &) = default;
    constexpr Meters & operator = (Meters &&) = default;
    constexpr ~Meters() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Meters(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply the unary - operator to the wrapped object.
     */
    friend constexpr Meters operator - (Meters const & t)
    noexcept(
        noexcept(- std::declval<double const&>()) &&
        std::is_nothrow_assignable<
            double&,
            decltype(- std::declval<double const&>())>::value)
    {
        auto result = t;
        result.value = - t.value;
        return result;
    }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Meters & operator *= (
        Meters & lhs,
        Meters const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Meters operator * (
        Meters lhs,
        Meters const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Meters & operator += (
        Meters & lhs,
        Meters const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Meters operator + (
        Meters lhs,
        Meters const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Meters & operator -= (
        Meters & lhs,
        Meters const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Meters operator - (
        Meters lhs,
        Meters const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Meters & operator /= (
        Meters & lhs,
        Meters const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Meters operator / (
        Meters lhs,
        Meters const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Meters const &,
        Meters const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        Meters const & lhs,
        Meters const & rhs)
    noexcept(noexcept(std::declval<double const &>() <
        std::declval<double const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        Meters const & lhs,
        Meters const & rhs)
    noexcept(noexcept(std::declval<double const &>() <=
        std::declval<double const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        Meters const & lhs,
        Meters const & rhs)
    noexcept(noexcept(std::declval<double const &>() >
        std::declval<double const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        Meters const & lhs,
        Meters const & rhs)
    noexcept(noexcept(std::declval<double const &>() >=
        std::declval<double const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Meters const &,
        Meters const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        Meters const & lhs,
        Meters const & rhs)
    noexcept(noexcept(std::declval<double const &>() ==
        std::declval<double const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        Meters const & lhs,
        Meters const & rhs)
    noexcept(noexcept(std::declval<double const &>() !=
        std::declval<double const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace units
} // namespace physics


namespace physics {
namespace units {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: physics::units
 * - type_name: Seconds
 * - description: strong double; !=, *, +, -, /, <=>, ==, u-
 * - default_value: ""
 */
struct Seconds
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    constexpr explicit Seconds() = default;
    constexpr Seconds(Seconds const &) = default;
    constexpr Seconds(Seconds &&) = default;
    constexpr Seconds & operator = (Seconds const &) = default;
    constexpr Seconds & operator = (Seconds &&) = default;
    constexpr ~Seconds() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Seconds(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply the unary - operator to the wrapped object.
     */
    friend constexpr Seconds operator - (Seconds const & t)
    noexcept(
        noexcept(- std::declval<double const&>()) &&
        std::is_nothrow_assignable<
            double&,
            decltype(- std::declval<double const&>())>::value)
    {
        auto result = t;
        result.value = - t.value;
        return result;
    }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Seconds & operator *= (
        Seconds & lhs,
        Seconds const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Seconds operator * (
        Seconds lhs,
        Seconds const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Seconds & operator += (
        Seconds & lhs,
        Seconds const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Seconds operator + (
        Seconds lhs,
        Seconds const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Seconds & operator -= (
        Seconds & lhs,
        Seconds const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Seconds operator - (
        Seconds lhs,
        Seconds const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Seconds & operator /= (
        Seconds & lhs,
        Seconds const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Seconds operator / (
        Seconds lhs,
        Seconds const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Seconds const &,
        Seconds const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        Seconds const & lhs,
        Seconds const & rhs)
    noexcept(noexcept(std::declval<double const &>() <
        std::declval<double const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        Seconds const & lhs,
        Seconds const & rhs)
    noexcept(noexcept(std::declval<double const &>() <=
        std::declval<double const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        Seconds const & lhs,
        Seconds const & rhs)
    noexcept(noexcept(std::declval<double const &>() >
        std::declval<double const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        Seconds const & lhs,
        Seconds const & rhs)
    noexcept(noexcept(std::declval<double const &>() >=
        std::declval<double const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Seconds const &,
        Seconds const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        Seconds const & lhs,
        Seconds const & rhs)
    noexcept(noexcept(std::declval<double const &>() ==
        std::declval<double const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        Seconds const & lhs,
        Seconds const & rhs)
    noexcept(noexcept(std::declval<double const &>() !=
        std::declval<double const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace units
} // namespace physics


namespace physics {
namespace units {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: physics::units
 * - type_name: MetersPerSecond
 * - description: strong double; !=, *, +, -, /, <=>, ==, u-
 * - default_value: ""
 */
struct MetersPerSecond
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    constexpr explicit MetersPerSecond() = default;
    constexpr MetersPerSecond(MetersPerSecond const &) = default;
    constexpr MetersPerSecond(MetersPerSecond &&) = default;
    constexpr MetersPerSecond & operator = (MetersPerSecond const &) = default;
    constexpr MetersPerSecond & operator = (MetersPerSecond &&) = default;
    constexpr ~MetersPerSecond() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit MetersPerSecond(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply the unary - operator to the wrapped object.
     */
    friend constexpr MetersPerSecond operator - (MetersPerSecond const & t)
    noexcept(
        noexcept(- std::declval<double const&>()) &&
        std::is_nothrow_assignable<
            double&,
            decltype(- std::declval<double const&>())>::value)
    {
        auto result = t;
        result.value = - t.value;
        return result;
    }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr MetersPerSecond & operator *= (
        MetersPerSecond & lhs,
        MetersPerSecond const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr MetersPerSecond operator * (
        MetersPerSecond lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr MetersPerSecond & operator += (
        MetersPerSecond & lhs,
        MetersPerSecond const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr MetersPerSecond operator + (
        MetersPerSecond lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr MetersPerSecond & operator -= (
        MetersPerSecond & lhs,
        MetersPerSecond const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr MetersPerSecond operator - (
        MetersPerSecond lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr MetersPerSecond & operator /= (
        MetersPerSecond & lhs,
        MetersPerSecond const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr MetersPerSecond operator / (
        MetersPerSecond lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        MetersPerSecond const &,
        MetersPerSecond const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        MetersPerSecond const & lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(std::declval<double const &>() <
        std::declval<double const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        MetersPerSecond const & lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(std::declval<double const &>() <=
        std::declval<double const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        MetersPerSecond const & lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(std::declval<double const &>() >
        std::declval<double const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        MetersPerSecond const & lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(std::declval<double const &>() >=
        std::declval<double const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        MetersPerSecond const &,
        MetersPerSecond const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        MetersPerSecond const & lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(std::declval<double const &>() ==
        std::declval<double const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        MetersPerSecond const & lhs,
        MetersPerSecond const & rhs)
    noexcept(noexcept(std::declval<double const &>() !=
        std::declval<double const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace units
} // namespace physics


namespace data {

/**
 * @brief Strong type wrapper for size_t
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: data
 * - type_name: ByteCount
 * - description: strong size_t; !=, %, *, +, ++, -, --, /, <, <<, <=, ==, >, >=
 * - default_value: "0"
 */
struct ByteCount
: private atlas::strong_type_tag
{
    size_t value{0};

    using atlas_value_type = size_t;

    constexpr explicit ByteCount() = default;
    constexpr ByteCount(ByteCount const &) = default;
    constexpr ByteCount(ByteCount &&) = default;
    constexpr ByteCount & operator = (ByteCount const &) = default;
    constexpr ByteCount & operator = (ByteCount &&) = default;
    constexpr ~ByteCount() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<size_t, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ByteCount(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator size_t const & () const { return value; }
    constexpr explicit operator size_t & () { return value; }

    /**
     * Apply the prefix ++ operator to the wrapped object.
     */
    friend constexpr ByteCount &
    operator ++ (ByteCount & t)
    noexcept(noexcept(++std::declval<size_t&>()))
    {
        ++t.value;
        return t;
    }
    /**
     * Apply the postfix ++ operator to the wrapped object.
     */
    friend constexpr ByteCount
    operator ++ (ByteCount & t, int)
    noexcept(
        std::is_nothrow_copy_constructible<size_t>::value &&
        noexcept(++std::declval<size_t&>()))
    {
        auto result = t;
        ++t.value;
        return result;
    }

    /**
     * Apply the prefix -- operator to the wrapped object.
     */
    friend constexpr ByteCount &
    operator -- (ByteCount & t)
    noexcept(noexcept(--std::declval<size_t&>()))
    {
        --t.value;
        return t;
    }
    /**
     * Apply the postfix -- operator to the wrapped object.
     */
    friend constexpr ByteCount
    operator -- (ByteCount & t, int)
    noexcept(
        std::is_nothrow_copy_constructible<size_t>::value &&
        noexcept(--std::declval<size_t&>()))
    {
        auto result = t;
        --t.value;
        return result;
    }

    /**
     * Apply % assignment to the wrapped objects.
     */
    friend constexpr ByteCount & operator %= (
        ByteCount & lhs,
        ByteCount const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<size_t &>() %= std::declval<size_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value %= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator % to the wrapped object.
     */
    friend constexpr ByteCount operator % (
        ByteCount lhs,
        ByteCount const & rhs)
    noexcept(noexcept(lhs %= rhs))
    {
        lhs %= rhs;
        return lhs;
    }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr ByteCount & operator *= (
        ByteCount & lhs,
        ByteCount const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<size_t &>() *= std::declval<size_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr ByteCount operator * (
        ByteCount lhs,
        ByteCount const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr ByteCount & operator += (
        ByteCount & lhs,
        ByteCount const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<size_t &>() += std::declval<size_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr ByteCount operator + (
        ByteCount lhs,
        ByteCount const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr ByteCount & operator -= (
        ByteCount & lhs,
        ByteCount const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<size_t &>() -= std::declval<size_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr ByteCount operator - (
        ByteCount lhs,
        ByteCount const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr ByteCount & operator /= (
        ByteCount & lhs,
        ByteCount const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<size_t &>() /= std::declval<size_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr ByteCount operator / (
        ByteCount lhs,
        ByteCount const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr ByteCount & operator <<= (
        ByteCount & lhs,
        ByteCount const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<size_t &>() <<= std::declval<size_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr ByteCount operator << (
        ByteCount lhs,
        ByteCount const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        ByteCount const & lhs,
        ByteCount const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() != std::declval<size_t const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        ByteCount const & lhs,
        ByteCount const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() < std::declval<size_t const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        ByteCount const & lhs,
        ByteCount const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() <= std::declval<size_t const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ByteCount const & lhs,
        ByteCount const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() == std::declval<size_t const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        ByteCount const & lhs,
        ByteCount const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() > std::declval<size_t const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        ByteCount const & lhs,
        ByteCount const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() >= std::declval<size_t const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace data


namespace graphics {
namespace color {

/**
 * @brief Strong type wrapper for uint8_t
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: graphics::color
 * - type_name: RedChannel
 * - description: strong uint8_t; !=, &, *, +, -, /, <=>, ==, ^, |, ~
 * - default_value: "0"
 */
struct RedChannel
: private atlas::strong_type_tag
{
    uint8_t value{0};

    using atlas_value_type = uint8_t;

    constexpr explicit RedChannel() = default;
    constexpr RedChannel(RedChannel const &) = default;
    constexpr RedChannel(RedChannel &&) = default;
    constexpr RedChannel & operator = (RedChannel const &) = default;
    constexpr RedChannel & operator = (RedChannel &&) = default;
    constexpr ~RedChannel() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<uint8_t, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit RedChannel(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator uint8_t const & () const { return value; }
    constexpr explicit operator uint8_t & () { return value; }

    /**
     * Apply the unary ~ operator to the wrapped object.
     */
    friend constexpr RedChannel operator ~ (RedChannel const & t)
    noexcept(
        noexcept(~ std::declval<uint8_t const&>()) &&
        std::is_nothrow_assignable<
            uint8_t&,
            decltype(~ std::declval<uint8_t const&>())>::value)
    {
        auto result = t;
        result.value = ~ t.value;
        return result;
    }

    /**
     * Apply & assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator &= (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() &= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value &= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator & to the wrapped object.
     */
    friend constexpr RedChannel operator & (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs &= rhs))
    {
        lhs &= rhs;
        return lhs;
    }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator *= (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() *= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr RedChannel operator * (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator += (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() += std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr RedChannel operator + (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator -= (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() -= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr RedChannel operator - (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator /= (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() /= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr RedChannel operator / (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

    /**
     * Apply ^ assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator ^= (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() ^= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value ^= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator ^ to the wrapped object.
     */
    friend constexpr RedChannel operator ^ (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs ^= rhs))
    {
        lhs ^= rhs;
        return lhs;
    }

    /**
     * Apply | assignment to the wrapped objects.
     */
    friend constexpr RedChannel & operator |= (
        RedChannel & lhs,
        RedChannel const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() |= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value |= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator | to the wrapped object.
     */
    friend constexpr RedChannel operator | (
        RedChannel lhs,
        RedChannel const & rhs)
    noexcept(noexcept(lhs |= rhs))
    {
        lhs |= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        RedChannel const &,
        RedChannel const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        RedChannel const & lhs,
        RedChannel const & rhs)
    noexcept(noexcept(std::declval<uint8_t const &>() <
        std::declval<uint8_t const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        RedChannel const & lhs,
        RedChannel const & rhs)
    noexcept(noexcept(std::declval<uint8_t const &>() <=
        std::declval<uint8_t const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        RedChannel const & lhs,
        RedChannel const & rhs)
    noexcept(noexcept(std::declval<uint8_t const &>() >
        std::declval<uint8_t const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        RedChannel const & lhs,
        RedChannel const & rhs)
    noexcept(noexcept(std::declval<uint8_t const &>() >=
        std::declval<uint8_t const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        RedChannel const &,
        RedChannel const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        RedChannel const & lhs,
        RedChannel const & rhs)
    noexcept(noexcept(std::declval<uint8_t const &>() ==
        std::declval<uint8_t const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        RedChannel const & lhs,
        RedChannel const & rhs)
    noexcept(noexcept(std::declval<uint8_t const &>() !=
        std::declval<uint8_t const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace color
} // namespace graphics


namespace security {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: security
 * - type_name: EncryptedData
 * - description: strong std::string; !=, <<, ==, hash
 * - default_value: ""
 */
class EncryptedData
: private atlas::strong_type_tag
{
    std::string value;

public:
    using atlas_value_type = std::string;

    constexpr explicit EncryptedData() = default;
    constexpr EncryptedData(EncryptedData const &) = default;
    constexpr EncryptedData(EncryptedData &&) = default;
    constexpr EncryptedData & operator = (EncryptedData const &) = default;
    constexpr EncryptedData & operator = (EncryptedData &&) = default;
    constexpr ~EncryptedData() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit EncryptedData(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr EncryptedData & operator <<= (
        EncryptedData & lhs,
        EncryptedData const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<std::string &>() <<= std::declval<std::string const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr EncryptedData operator << (
        EncryptedData lhs,
        EncryptedData const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        EncryptedData const & lhs,
        EncryptedData const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        EncryptedData const & lhs,
        EncryptedData const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace security


/**
 * @brief std::hash specialization for security::EncryptedData
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<security::EncryptedData>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (security::EncryptedData const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};

namespace geo {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: geo
 * - type_name: Latitude
 * - description: strong double; !=, <, <<, <=, ==, >, >=, u-
 * - default_value: "0.0"
 */
struct Latitude
: private atlas::strong_type_tag
{
    double value{0.0};

    using atlas_value_type = double;

    constexpr explicit Latitude() = default;
    constexpr Latitude(Latitude const &) = default;
    constexpr Latitude(Latitude &&) = default;
    constexpr Latitude & operator = (Latitude const &) = default;
    constexpr Latitude & operator = (Latitude &&) = default;
    constexpr ~Latitude() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Latitude(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply the unary - operator to the wrapped object.
     */
    friend constexpr Latitude operator - (Latitude const & t)
    noexcept(
        noexcept(- std::declval<double const&>()) &&
        std::is_nothrow_assignable<
            double&,
            decltype(- std::declval<double const&>())>::value)
    {
        auto result = t;
        result.value = - t.value;
        return result;
    }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr Latitude & operator <<= (
        Latitude & lhs,
        Latitude const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() <<= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr Latitude operator << (
        Latitude lhs,
        Latitude const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Latitude const & lhs,
        Latitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() != std::declval<double const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        Latitude const & lhs,
        Latitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() < std::declval<double const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        Latitude const & lhs,
        Latitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() <= std::declval<double const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Latitude const & lhs,
        Latitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() == std::declval<double const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        Latitude const & lhs,
        Latitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() > std::declval<double const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        Latitude const & lhs,
        Latitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() >= std::declval<double const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace geo


namespace geo {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: geo
 * - type_name: Longitude
 * - description: strong double; !=, <, <<, <=, ==, >, >=, u-
 * - default_value: "0.0"
 */
struct Longitude
: private atlas::strong_type_tag
{
    double value{0.0};

    using atlas_value_type = double;

    constexpr explicit Longitude() = default;
    constexpr Longitude(Longitude const &) = default;
    constexpr Longitude(Longitude &&) = default;
    constexpr Longitude & operator = (Longitude const &) = default;
    constexpr Longitude & operator = (Longitude &&) = default;
    constexpr ~Longitude() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Longitude(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply the unary - operator to the wrapped object.
     */
    friend constexpr Longitude operator - (Longitude const & t)
    noexcept(
        noexcept(- std::declval<double const&>()) &&
        std::is_nothrow_assignable<
            double&,
            decltype(- std::declval<double const&>())>::value)
    {
        auto result = t;
        result.value = - t.value;
        return result;
    }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr Longitude & operator <<= (
        Longitude & lhs,
        Longitude const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() <<= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr Longitude operator << (
        Longitude lhs,
        Longitude const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Longitude const & lhs,
        Longitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() != std::declval<double const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        Longitude const & lhs,
        Longitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() < std::declval<double const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        Longitude const & lhs,
        Longitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() <= std::declval<double const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Longitude const & lhs,
        Longitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() == std::declval<double const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        Longitude const & lhs,
        Longitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() > std::declval<double const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        Longitude const & lhs,
        Longitude const & rhs)
    noexcept(noexcept(std::declval<double const&>() >= std::declval<double const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace geo


namespace concurrency {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: concurrency
 * - type_name: ThreadId
 * - description: strong int; !=, <<, ==, hash, no-constexpr, no-constexpr-hash
 * - default_value: ""
 */
struct ThreadId
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    explicit ThreadId() = default;
    ThreadId(ThreadId const &) = default;
    ThreadId(ThreadId &&) = default;
    ThreadId & operator = (ThreadId const &) = default;
    ThreadId & operator = (ThreadId &&) = default;
    ~ThreadId() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    explicit ThreadId(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    explicit operator int const & () const { return value; }
    explicit operator int & () { return value; }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend ThreadId & operator <<= (
        ThreadId & lhs,
        ThreadId const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() <<= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend ThreadId operator << (
        ThreadId lhs,
        ThreadId const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend bool operator != (
        ThreadId const & lhs,
        ThreadId const & rhs)
    noexcept(noexcept(std::declval<int const&>() != std::declval<int const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend bool operator == (
        ThreadId const & lhs,
        ThreadId const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace concurrency


/**
 * @brief std::hash specialization for concurrency::ThreadId
 *
 * Delegates to std::hash of the underlying type int
 */
template <>
struct std::hash<concurrency::ThreadId>
{
    ATLAS_NODISCARD
    std::size_t operator () (concurrency::ThreadId const & t) const
    noexcept(
        noexcept(std::hash<int>{}(
            std::declval<int const &>())))
    {
        return std::hash<int>{}(
            static_cast<int const &>(t));
    }
};

namespace math {
namespace rational {

/**
 * @brief Strong type wrapper for long
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: math::rational
 * - type_name: Numerator
 * - description: strong long; !=, *, +, -, <=>, ==
 * - default_value: ""
 */
struct Numerator
: private atlas::strong_type_tag
{
    long value;

    using atlas_value_type = long;

    constexpr explicit Numerator() = default;
    constexpr Numerator(Numerator const &) = default;
    constexpr Numerator(Numerator &&) = default;
    constexpr Numerator & operator = (Numerator const &) = default;
    constexpr Numerator & operator = (Numerator &&) = default;
    constexpr ~Numerator() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<long, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Numerator(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator long const & () const { return value; }
    constexpr explicit operator long & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Numerator & operator *= (
        Numerator & lhs,
        Numerator const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<long &>() *= std::declval<long const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Numerator operator * (
        Numerator lhs,
        Numerator const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Numerator & operator += (
        Numerator & lhs,
        Numerator const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<long &>() += std::declval<long const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Numerator operator + (
        Numerator lhs,
        Numerator const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Numerator & operator -= (
        Numerator & lhs,
        Numerator const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<long &>() -= std::declval<long const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Numerator operator - (
        Numerator lhs,
        Numerator const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Numerator const &,
        Numerator const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        Numerator const & lhs,
        Numerator const & rhs)
    noexcept(noexcept(std::declval<long const &>() <
        std::declval<long const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        Numerator const & lhs,
        Numerator const & rhs)
    noexcept(noexcept(std::declval<long const &>() <=
        std::declval<long const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        Numerator const & lhs,
        Numerator const & rhs)
    noexcept(noexcept(std::declval<long const &>() >
        std::declval<long const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        Numerator const & lhs,
        Numerator const & rhs)
    noexcept(noexcept(std::declval<long const &>() >=
        std::declval<long const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Numerator const &,
        Numerator const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        Numerator const & lhs,
        Numerator const & rhs)
    noexcept(noexcept(std::declval<long const &>() ==
        std::declval<long const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        Numerator const & lhs,
        Numerator const & rhs)
    noexcept(noexcept(std::declval<long const &>() !=
        std::declval<long const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace rational
} // namespace math


namespace math {
namespace rational {

/**
 * @brief Strong type wrapper for long
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: math::rational
 * - type_name: Denominator
 * - description: strong long; !=, *, /, <=>, ==
 * - default_value: "1"
 */
struct Denominator
: private atlas::strong_type_tag
{
    long value{1};

    using atlas_value_type = long;

    constexpr explicit Denominator() = default;
    constexpr Denominator(Denominator const &) = default;
    constexpr Denominator(Denominator &&) = default;
    constexpr Denominator & operator = (Denominator const &) = default;
    constexpr Denominator & operator = (Denominator &&) = default;
    constexpr ~Denominator() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<long, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Denominator(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator long const & () const { return value; }
    constexpr explicit operator long & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Denominator & operator *= (
        Denominator & lhs,
        Denominator const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<long &>() *= std::declval<long const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Denominator operator * (
        Denominator lhs,
        Denominator const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Denominator & operator /= (
        Denominator & lhs,
        Denominator const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<long &>() /= std::declval<long const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Denominator operator / (
        Denominator lhs,
        Denominator const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Denominator const &,
        Denominator const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        Denominator const & lhs,
        Denominator const & rhs)
    noexcept(noexcept(std::declval<long const &>() <
        std::declval<long const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        Denominator const & lhs,
        Denominator const & rhs)
    noexcept(noexcept(std::declval<long const &>() <=
        std::declval<long const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        Denominator const & lhs,
        Denominator const & rhs)
    noexcept(noexcept(std::declval<long const &>() >
        std::declval<long const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        Denominator const & lhs,
        Denominator const & rhs)
    noexcept(noexcept(std::declval<long const &>() >=
        std::declval<long const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Denominator const &,
        Denominator const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        Denominator const & lhs,
        Denominator const & rhs)
    noexcept(noexcept(std::declval<long const &>() ==
        std::declval<long const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        Denominator const & lhs,
        Denominator const & rhs)
    noexcept(noexcept(std::declval<long const &>() !=
        std::declval<long const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace rational
} // namespace math


namespace net {
namespace ipv4 {

/**
 * @brief Strong type wrapper for uint8_t
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: net::ipv4
 * - type_name: Octet
 * - description: strong uint8_t; !=, &, <<, ==, >>, ^, |, ~
 * - default_value: "0"
 */
struct Octet
: private atlas::strong_type_tag
{
    uint8_t value{0};

    using atlas_value_type = uint8_t;

    constexpr explicit Octet() = default;
    constexpr Octet(Octet const &) = default;
    constexpr Octet(Octet &&) = default;
    constexpr Octet & operator = (Octet const &) = default;
    constexpr Octet & operator = (Octet &&) = default;
    constexpr ~Octet() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<uint8_t, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Octet(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator uint8_t const & () const { return value; }
    constexpr explicit operator uint8_t & () { return value; }

    /**
     * Apply the unary ~ operator to the wrapped object.
     */
    friend constexpr Octet operator ~ (Octet const & t)
    noexcept(
        noexcept(~ std::declval<uint8_t const&>()) &&
        std::is_nothrow_assignable<
            uint8_t&,
            decltype(~ std::declval<uint8_t const&>())>::value)
    {
        auto result = t;
        result.value = ~ t.value;
        return result;
    }

    /**
     * Apply & assignment to the wrapped objects.
     */
    friend constexpr Octet & operator &= (
        Octet & lhs,
        Octet const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() &= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value &= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator & to the wrapped object.
     */
    friend constexpr Octet operator & (
        Octet lhs,
        Octet const & rhs)
    noexcept(noexcept(lhs &= rhs))
    {
        lhs &= rhs;
        return lhs;
    }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr Octet & operator <<= (
        Octet & lhs,
        Octet const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() <<= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr Octet operator << (
        Octet lhs,
        Octet const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Apply >> assignment to the wrapped objects.
     */
    friend constexpr Octet & operator >>= (
        Octet & lhs,
        Octet const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() >>= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value >>= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator >> to the wrapped object.
     */
    friend constexpr Octet operator >> (
        Octet lhs,
        Octet const & rhs)
    noexcept(noexcept(lhs >>= rhs))
    {
        lhs >>= rhs;
        return lhs;
    }

    /**
     * Apply ^ assignment to the wrapped objects.
     */
    friend constexpr Octet & operator ^= (
        Octet & lhs,
        Octet const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() ^= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value ^= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator ^ to the wrapped object.
     */
    friend constexpr Octet operator ^ (
        Octet lhs,
        Octet const & rhs)
    noexcept(noexcept(lhs ^= rhs))
    {
        lhs ^= rhs;
        return lhs;
    }

    /**
     * Apply | assignment to the wrapped objects.
     */
    friend constexpr Octet & operator |= (
        Octet & lhs,
        Octet const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<uint8_t &>() |= std::declval<uint8_t const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value |= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator | to the wrapped object.
     */
    friend constexpr Octet operator | (
        Octet lhs,
        Octet const & rhs)
    noexcept(noexcept(lhs |= rhs))
    {
        lhs |= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Octet const & lhs,
        Octet const & rhs)
    noexcept(noexcept(std::declval<uint8_t const&>() != std::declval<uint8_t const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Octet const & lhs,
        Octet const & rhs)
    noexcept(noexcept(std::declval<uint8_t const&>() == std::declval<uint8_t const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace ipv4
} // namespace net


namespace app {
namespace config {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: app::config
 * - type_name: ConfigKey
 * - description: strong std::string; !=, +, <, <<, ==, [], hash
 * - default_value: ""
 */
class ConfigKey
: private atlas::strong_type_tag
{
    std::string value;

public:
    using atlas_value_type = std::string;

    constexpr explicit ConfigKey() = default;
    constexpr ConfigKey(ConfigKey const &) = default;
    constexpr ConfigKey(ConfigKey &&) = default;
    constexpr ConfigKey & operator = (ConfigKey const &) = default;
    constexpr ConfigKey & operator = (ConfigKey &&) = default;
    constexpr ~ConfigKey() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ConfigKey(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Subscript operator that forwards to the wrapped object.
     */
#if __cpp_multidimensional_subscript >= 202110L
    template <typename ArgT, typename... ArgTs>
    constexpr decltype(auto) operator [] (ArgT && arg, ArgTs && ... args)
    noexcept(noexcept(value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...]))
    {
        return value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...];
    }
    template <typename ArgT, typename... ArgTs>
    constexpr decltype(auto) operator [] (ArgT && arg, ArgTs && ... args) const
    noexcept(noexcept(value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...]))
    {
        return value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...];
    }
#else
    template <typename ArgT>
    constexpr auto operator [] (ArgT && arg)
    noexcept(noexcept(value[std::forward<ArgT>(arg)]))
    -> decltype(value[std::forward<ArgT>(arg)])
    {
        return value[std::forward<ArgT>(arg)];
    }
    template <typename ArgT>
    constexpr auto operator [] (ArgT && arg) const
    noexcept(noexcept(value[std::forward<ArgT>(arg)]))
    -> decltype(value[std::forward<ArgT>(arg)])
    {
        return value[std::forward<ArgT>(arg)];
    }
#endif

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr ConfigKey & operator += (
        ConfigKey & lhs,
        ConfigKey const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<std::string &>() += std::declval<std::string const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr ConfigKey operator + (
        ConfigKey lhs,
        ConfigKey const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply << assignment to the wrapped objects.
     */
    friend constexpr ConfigKey & operator <<= (
        ConfigKey & lhs,
        ConfigKey const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<std::string &>() <<= std::declval<std::string const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value <<= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator << to the wrapped object.
     */
    friend constexpr ConfigKey operator << (
        ConfigKey lhs,
        ConfigKey const & rhs)
    noexcept(noexcept(lhs <<= rhs))
    {
        lhs <<= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        ConfigKey const & lhs,
        ConfigKey const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        ConfigKey const & lhs,
        ConfigKey const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() < std::declval<std::string const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ConfigKey const & lhs,
        ConfigKey const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace config
} // namespace app


/**
 * @brief std::hash specialization for app::config::ConfigKey
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<app::config::ConfigKey>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (app::config::ConfigKey const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};

namespace containers {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: containers
 * - type_name: IterableString
 * - description: strong std::string; !=, ==, iterable
 * - default_value: """"
 */
struct IterableString
: private atlas::strong_type_tag
{
    std::string value{""};

    using atlas_value_type = std::string;

    constexpr explicit IterableString() = default;
    constexpr IterableString(IterableString const &) = default;
    constexpr IterableString(IterableString &&) = default;
    constexpr IterableString & operator = (IterableString const &) = default;
    constexpr IterableString & operator = (IterableString &&) = default;
    constexpr ~IterableString() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit IterableString(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Iterator type aliases for container-like interface.
     */
    using iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::string&>()));
    using const_iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::string const&>()));
    using value_type = typename std::remove_reference<decltype(
        *atlas::atlas_detail::begin_(
            std::declval<std::string&>()))>::type;

    /**
     * Member functions for iterator access.
     * Enables both explicit calls (e.g., s.begin()) and range-based for loops.
     * Uses ADL-enabled helpers that work in decltype/noexcept contexts.
     */
    constexpr auto begin()
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end()
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    constexpr auto begin() const
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end() const
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        IterableString const & lhs,
        IterableString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        IterableString const & lhs,
        IterableString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace containers


namespace containers {

/**
 * @brief Strong type wrapper for std::vector<int>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: containers
 * - type_name: IntVector
 * - description: strong std::vector<int>; ==, [], iterable
 * - default_value: ""
 */
struct IntVector
: private atlas::strong_type_tag
{
    std::vector<int> value;

    using atlas_value_type = std::vector<int>;

    constexpr explicit IntVector() = default;
    constexpr IntVector(IntVector const &) = default;
    constexpr IntVector(IntVector &&) = default;
    constexpr IntVector & operator = (IntVector const &) = default;
    constexpr IntVector & operator = (IntVector &&) = default;
    constexpr ~IntVector() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::vector<int>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit IntVector(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::vector<int> const & () const { return value; }
    constexpr explicit operator std::vector<int> & () { return value; }

    /**
     * Subscript operator that forwards to the wrapped object.
     */
#if __cpp_multidimensional_subscript >= 202110L
    template <typename ArgT, typename... ArgTs>
    constexpr decltype(auto) operator [] (ArgT && arg, ArgTs && ... args)
    noexcept(noexcept(value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...]))
    {
        return value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...];
    }
    template <typename ArgT, typename... ArgTs>
    constexpr decltype(auto) operator [] (ArgT && arg, ArgTs && ... args) const
    noexcept(noexcept(value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...]))
    {
        return value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...];
    }
#else
    template <typename ArgT>
    constexpr auto operator [] (ArgT && arg)
    noexcept(noexcept(value[std::forward<ArgT>(arg)]))
    -> decltype(value[std::forward<ArgT>(arg)])
    {
        return value[std::forward<ArgT>(arg)];
    }
    template <typename ArgT>
    constexpr auto operator [] (ArgT && arg) const
    noexcept(noexcept(value[std::forward<ArgT>(arg)]))
    -> decltype(value[std::forward<ArgT>(arg)])
    {
        return value[std::forward<ArgT>(arg)];
    }
#endif

    /**
     * Iterator type aliases for container-like interface.
     */
    using iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<int>&>()));
    using const_iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<int> const&>()));
    using value_type = typename std::remove_reference<decltype(
        *atlas::atlas_detail::begin_(
            std::declval<std::vector<int>&>()))>::type;

    /**
     * Member functions for iterator access.
     * Enables both explicit calls (e.g., s.begin()) and range-based for loops.
     * Uses ADL-enabled helpers that work in decltype/noexcept contexts.
     */
    constexpr auto begin()
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end()
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    constexpr auto begin() const
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end() const
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        IntVector const & lhs,
        IntVector const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() == std::declval<std::vector<int> const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace containers


namespace containers {

/**
 * @brief Strong type wrapper for std::vector<uint8_t>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: containers
 * - type_name: DataBuffer
 * - description: strong std::vector<uint8_t>; !=, ==, [], hash, iterable
 * - default_value: ""
 */
class DataBuffer
: private atlas::strong_type_tag
{
    std::vector<uint8_t> value;

public:
    using atlas_value_type = std::vector<uint8_t>;

    constexpr explicit DataBuffer() = default;
    constexpr DataBuffer(DataBuffer const &) = default;
    constexpr DataBuffer(DataBuffer &&) = default;
    constexpr DataBuffer & operator = (DataBuffer const &) = default;
    constexpr DataBuffer & operator = (DataBuffer &&) = default;
    constexpr ~DataBuffer() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::vector<uint8_t>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit DataBuffer(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::vector<uint8_t> const & () const { return value; }
    constexpr explicit operator std::vector<uint8_t> & () { return value; }

    /**
     * Subscript operator that forwards to the wrapped object.
     */
#if __cpp_multidimensional_subscript >= 202110L
    template <typename ArgT, typename... ArgTs>
    constexpr decltype(auto) operator [] (ArgT && arg, ArgTs && ... args)
    noexcept(noexcept(value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...]))
    {
        return value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...];
    }
    template <typename ArgT, typename... ArgTs>
    constexpr decltype(auto) operator [] (ArgT && arg, ArgTs && ... args) const
    noexcept(noexcept(value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...]))
    {
        return value[std::forward<ArgT>(arg), std::forward<ArgTs>(args)...];
    }
#else
    template <typename ArgT>
    constexpr auto operator [] (ArgT && arg)
    noexcept(noexcept(value[std::forward<ArgT>(arg)]))
    -> decltype(value[std::forward<ArgT>(arg)])
    {
        return value[std::forward<ArgT>(arg)];
    }
    template <typename ArgT>
    constexpr auto operator [] (ArgT && arg) const
    noexcept(noexcept(value[std::forward<ArgT>(arg)]))
    -> decltype(value[std::forward<ArgT>(arg)])
    {
        return value[std::forward<ArgT>(arg)];
    }
#endif

    /**
     * Iterator type aliases for container-like interface.
     */
    using iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<uint8_t>&>()));
    using const_iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<uint8_t> const&>()));
    using value_type = typename std::remove_reference<decltype(
        *atlas::atlas_detail::begin_(
            std::declval<std::vector<uint8_t>&>()))>::type;

    /**
     * Member functions for iterator access.
     * Enables both explicit calls (e.g., s.begin()) and range-based for loops.
     * Uses ADL-enabled helpers that work in decltype/noexcept contexts.
     */
    constexpr auto begin()
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end()
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    constexpr auto begin() const
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end() const
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        DataBuffer const & lhs,
        DataBuffer const & rhs)
    noexcept(noexcept(std::declval<std::vector<uint8_t> const&>() != std::declval<std::vector<uint8_t> const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        DataBuffer const & lhs,
        DataBuffer const & rhs)
    noexcept(noexcept(std::declval<std::vector<uint8_t> const&>() == std::declval<std::vector<uint8_t> const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace containers


/**
 * @brief std::hash specialization for containers::DataBuffer
 *
 * Delegates to std::hash of the underlying type std::vector<uint8_t>
 */
template <>
struct std::hash<containers::DataBuffer>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (containers::DataBuffer const & t) const
    noexcept(
        noexcept(std::hash<std::vector<uint8_t>>{}(
            std::declval<std::vector<uint8_t> const &>())))
    {
        return std::hash<std::vector<uint8_t>>{}(
            static_cast<std::vector<uint8_t> const &>(t));
    }
};

namespace formatting {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: formatting
 * - type_name: FormattedString
 * - description: strong std::string; !=, ==, fmt, hash, out
 * - default_value: ""
 */
struct FormattedString
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit FormattedString() = default;
    constexpr FormattedString(FormattedString const &) = default;
    constexpr FormattedString(FormattedString &&) = default;
    constexpr FormattedString & operator = (FormattedString const &) = default;
    constexpr FormattedString & operator = (FormattedString &&) = default;
    constexpr ~FormattedString() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit FormattedString(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        FormattedString const & lhs,
        FormattedString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        FormattedString const & lhs,
        FormattedString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Insert the wrapped object into an ostream.
     */
    friend std::ostream & operator << (
        std::ostream & strm,
        FormattedString const & t)
    {
        return strm << t.value;
    }
};
} // namespace formatting


/**
 * @brief std::hash specialization for formatting::FormattedString
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<formatting::FormattedString>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (formatting::FormattedString const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};

/**
 * @brief std::formatter specialization for formatting::FormattedString
 *
 * Enables use with std::format and std::print in C++20 and later:
 *   std::format("{}", strong_type_instance)
 *
 * This specialization is only available when std::format is available
 * (checked via __cpp_lib_format >= 202110L). Delegates formatting to the
 * underlying type std::string
 */
#if defined(__cpp_lib_format) && __cpp_lib_format >= 202110L
template <>
struct std::formatter<formatting::FormattedString> : std::formatter<std::string>
{
    auto format(formatting::FormattedString const & t, std::format_context & ctx) const
    {
        return std::formatter<std::string>::format(
            static_cast<std::string const &>(t), ctx);
    }
};
#endif // defined(__cpp_lib_format) && __cpp_lib_format >= 202110L

namespace formatting {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: formatting
 * - type_name: FormattedInt
 * - description: strong int; ==, fmt
 * - default_value: ""
 */
struct FormattedInt
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    constexpr explicit FormattedInt() = default;
    constexpr FormattedInt(FormattedInt const &) = default;
    constexpr FormattedInt(FormattedInt &&) = default;
    constexpr FormattedInt & operator = (FormattedInt const &) = default;
    constexpr FormattedInt & operator = (FormattedInt &&) = default;
    constexpr ~FormattedInt() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit FormattedInt(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        FormattedInt const & lhs,
        FormattedInt const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace formatting


/**
 * @brief std::formatter specialization for formatting::FormattedInt
 *
 * Enables use with std::format and std::print in C++20 and later:
 *   std::format("{}", strong_type_instance)
 *
 * This specialization is only available when std::format is available
 * (checked via __cpp_lib_format >= 202110L). Delegates formatting to the
 * underlying type int
 */
#if defined(__cpp_lib_format) && __cpp_lib_format >= 202110L
template <>
struct std::formatter<formatting::FormattedInt> : std::formatter<int>
{
    auto format(formatting::FormattedInt const & t, std::format_context & ctx) const
    {
        return std::formatter<int>::format(
            static_cast<int const &>(t), ctx);
    }
};
#endif // defined(__cpp_lib_format) && __cpp_lib_format >= 202110L

namespace text {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: text
 * - type_name: AssignableString
 * - description: strong std::string; !=, ==, assign, out
 * - default_value: ""
 */
struct AssignableString
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit AssignableString() = default;
    constexpr AssignableString(AssignableString const &) = default;
    constexpr AssignableString(AssignableString &&) = default;
    constexpr AssignableString & operator = (AssignableString const &) = default;
    constexpr AssignableString & operator = (AssignableString &&) = default;
    constexpr ~AssignableString() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit AssignableString(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * @brief Template assignment operator
     *
     * Allows assignment from any type that is assignable to the underlying type.
     * This provides convenience while maintaining type safety through SFINAE.
     *
     * Example:
     *   StrongType s{"initial"};
     *   s = "new value";        // Works if assignable
     *   s = std::string("foo"); // Works if assignable
     *   s = 42;                 // Rejected if not assignable
     *
     * Note: constexpr is applied only in C++14 and later because in C++11,
     * constexpr non-static member functions are implicitly const.
     */
#if defined(__cpp_concepts) && __cpp_concepts >= 201907L
    template <typename T>
      requires (std::assignable_from<std::string&, T> &&
                not std::same_as<std::decay_t<T>, AssignableString>)
#else
    template <typename T,
        typename std::enable_if<
            std::is_assignable<std::string&, T>::value &&
            not std::is_same<typename std::decay<T>::type, AssignableString>::value,
            int>::type = 0>
#endif
#if __cplusplus >= 201402L
    constexpr AssignableString& operator=(T&& t)
#else
    AssignableString& operator=(T&& t)
#endif
    noexcept(noexcept(std::declval<std::string&>() = std::declval<T>()))
    {
        value = std::forward<T>(t);
        return *this;
    }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        AssignableString const & lhs,
        AssignableString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        AssignableString const & lhs,
        AssignableString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Insert the wrapped object into an ostream.
     */
    friend std::ostream & operator << (
        std::ostream & strm,
        AssignableString const & t)
    {
        return strm << t.value;
    }
};
} // namespace text


namespace config {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: config
 * - type_name: AssignablePort
 * - description: strong int; !=, ==, assign
 * - default_value: ""
 */
struct AssignablePort
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    constexpr explicit AssignablePort() = default;
    constexpr AssignablePort(AssignablePort const &) = default;
    constexpr AssignablePort(AssignablePort &&) = default;
    constexpr AssignablePort & operator = (AssignablePort const &) = default;
    constexpr AssignablePort & operator = (AssignablePort &&) = default;
    constexpr ~AssignablePort() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit AssignablePort(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * @brief Template assignment operator
     *
     * Allows assignment from any type that is assignable to the underlying type.
     * This provides convenience while maintaining type safety through SFINAE.
     *
     * Example:
     *   StrongType s{"initial"};
     *   s = "new value";        // Works if assignable
     *   s = std::string("foo"); // Works if assignable
     *   s = 42;                 // Rejected if not assignable
     *
     * Note: constexpr is applied only in C++14 and later because in C++11,
     * constexpr non-static member functions are implicitly const.
     */
#if defined(__cpp_concepts) && __cpp_concepts >= 201907L
    template <typename T>
      requires (std::assignable_from<int&, T> &&
                not std::same_as<std::decay_t<T>, AssignablePort>)
#else
    template <typename T,
        typename std::enable_if<
            std::is_assignable<int&, T>::value &&
            not std::is_same<typename std::decay<T>::type, AssignablePort>::value,
            int>::type = 0>
#endif
#if __cplusplus >= 201402L
    constexpr AssignablePort& operator=(T&& t)
#else
    AssignablePort& operator=(T&& t)
#endif
    noexcept(noexcept(std::declval<int&>() = std::declval<T>()))
    {
        value = std::forward<T>(t);
        return *this;
    }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        AssignablePort const & lhs,
        AssignablePort const & rhs)
    noexcept(noexcept(std::declval<int const&>() != std::declval<int const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        AssignablePort const & lhs,
        AssignablePort const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace config


namespace text {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: text
 * - type_name: CastableString
 * - description: strong std::string; !=, ==, cast<std::string_view>
 * - default_value: ""
 */
struct CastableString
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit CastableString() = default;
    constexpr CastableString(CastableString const &) = default;
    constexpr CastableString(CastableString &&) = default;
    constexpr CastableString & operator = (CastableString const &) = default;
    constexpr CastableString & operator = (CastableString &&) = default;
    constexpr ~CastableString() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit CastableString(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Explicit cast to std::string_view
     */
    constexpr explicit operator std::string_view() const
    noexcept(noexcept(static_cast<std::string_view>(
        std::declval<std::string const&>())))
    {
        return static_cast<std::string_view>(value);
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        CastableString const & lhs,
        CastableString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        CastableString const & lhs,
        CastableString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace text


namespace text {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: text
 * - type_name: ViewableText
 * - description: strong std::string; ==, cast<bool>, explicit_cast<std::string_view>
 * - default_value: ""
 */
class ViewableText
: private atlas::strong_type_tag
{
    std::string value;

public:
    using atlas_value_type = std::string;

    constexpr explicit ViewableText() = default;
    constexpr ViewableText(ViewableText const &) = default;
    constexpr ViewableText(ViewableText &&) = default;
    constexpr ViewableText & operator = (ViewableText const &) = default;
    constexpr ViewableText & operator = (ViewableText &&) = default;
    constexpr ~ViewableText() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ViewableText(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Explicit cast to bool
     */
    constexpr explicit operator bool() const
    noexcept(noexcept(static_cast<bool>(
        std::declval<std::string const&>())))
    {
        return static_cast<bool>(value);
    }

    /**
     * Explicit cast to std::string_view
     */
    constexpr explicit operator std::string_view() const
    noexcept(noexcept(static_cast<std::string_view>(
        std::declval<std::string const&>())))
    {
        return static_cast<std::string_view>(value);
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ViewableText const & lhs,
        ViewableText const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace text


namespace flags {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: flags
 * - type_name: EnableFlag
 * - description: strong int; ==, implicit_cast<bool>
 * - default_value: ""
 */
struct EnableFlag
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    constexpr explicit EnableFlag() = default;
    constexpr EnableFlag(EnableFlag const &) = default;
    constexpr EnableFlag(EnableFlag &&) = default;
    constexpr EnableFlag & operator = (EnableFlag const &) = default;
    constexpr EnableFlag & operator = (EnableFlag &&) = default;
    constexpr ~EnableFlag() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit EnableFlag(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Implicit cast to bool
     */
    constexpr operator bool() const
    noexcept(noexcept(static_cast<bool>(
        std::declval<int const&>())))
    {
        return static_cast<bool>(value);
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        EnableFlag const & lhs,
        EnableFlag const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace flags


namespace demo {
namespace optional_strong {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::optional_strong
 * - type_name: Temperature
 * - description: double; +, -, <=>, ==
 * - default_value: "20.0"
 */
struct Temperature
: private atlas::strong_type_tag
{
    double value{20.0};

    using atlas_value_type = double;

    constexpr explicit Temperature() = default;
    constexpr Temperature(Temperature const &) = default;
    constexpr Temperature(Temperature &&) = default;
    constexpr Temperature & operator = (Temperature const &) = default;
    constexpr Temperature & operator = (Temperature &&) = default;
    constexpr ~Temperature() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Temperature(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Temperature & operator += (
        Temperature & lhs,
        Temperature const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Temperature operator + (
        Temperature lhs,
        Temperature const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Temperature & operator -= (
        Temperature & lhs,
        Temperature const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Temperature operator - (
        Temperature lhs,
        Temperature const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Temperature const &,
        Temperature const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        Temperature const & lhs,
        Temperature const & rhs)
    noexcept(noexcept(std::declval<double const &>() <
        std::declval<double const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        Temperature const & lhs,
        Temperature const & rhs)
    noexcept(noexcept(std::declval<double const &>() <=
        std::declval<double const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        Temperature const & lhs,
        Temperature const & rhs)
    noexcept(noexcept(std::declval<double const &>() >
        std::declval<double const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        Temperature const & lhs,
        Temperature const & rhs)
    noexcept(noexcept(std::declval<double const &>() >=
        std::declval<double const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Temperature const &,
        Temperature const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        Temperature const & lhs,
        Temperature const & rhs)
    noexcept(noexcept(std::declval<double const &>() ==
        std::declval<double const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        Temperature const & lhs,
        Temperature const & rhs)
    noexcept(noexcept(std::declval<double const &>() !=
        std::declval<double const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace optional_strong
} // namespace demo



/**
 * @brief Strong type wrapper for unsigned long
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: ::
 * - type_name: GlobalEventId
 * - description: unsigned long; !=, ==, hash
 * - default_value: ""
 */
struct GlobalEventId
: private atlas::strong_type_tag
{
    unsigned long value;

    using atlas_value_type = unsigned long;

    constexpr explicit GlobalEventId() = default;
    constexpr GlobalEventId(GlobalEventId const &) = default;
    constexpr GlobalEventId(GlobalEventId &&) = default;
    constexpr GlobalEventId & operator = (GlobalEventId const &) = default;
    constexpr GlobalEventId & operator = (GlobalEventId &&) = default;
    constexpr ~GlobalEventId() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<unsigned long, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit GlobalEventId(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator unsigned long const & () const { return value; }
    constexpr explicit operator unsigned long & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        GlobalEventId const & lhs,
        GlobalEventId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const&>() != std::declval<unsigned long const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        GlobalEventId const & lhs,
        GlobalEventId const & rhs)
    noexcept(noexcept(std::declval<unsigned long const&>() == std::declval<unsigned long const&>()))
    {
        return lhs.value == rhs.value;
    }
};


/**
 * @brief std::hash specialization for GlobalEventId
 *
 * Delegates to std::hash of the underlying type unsigned long
 */
template <>
struct std::hash<GlobalEventId>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (GlobalEventId const & t) const
    noexcept(
        noexcept(std::hash<unsigned long>{}(
            std::declval<unsigned long const &>())))
    {
        return std::hash<unsigned long>{}(
            static_cast<unsigned long const &>(t));
    }
};

namespace demo {
namespace constants {

/**
 * @brief Strong type wrapper for unsigned short
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::constants
 * - type_name: HttpStatusCode
 * - description: unsigned short; !=, <=>, ==
 * - default_value: ""
 */
struct HttpStatusCode
: private atlas::strong_type_tag
{
    unsigned short value;

    using atlas_value_type = unsigned short;

    static const HttpStatusCode bad_request;

    static const HttpStatusCode created;

    static const HttpStatusCode not_found;

    static const HttpStatusCode ok;

    static const HttpStatusCode server_error;

    constexpr explicit HttpStatusCode() = default;
    constexpr HttpStatusCode(HttpStatusCode const &) = default;
    constexpr HttpStatusCode(HttpStatusCode &&) = default;
    constexpr HttpStatusCode & operator = (HttpStatusCode const &) = default;
    constexpr HttpStatusCode & operator = (HttpStatusCode &&) = default;
    constexpr ~HttpStatusCode() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<unsigned short, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit HttpStatusCode(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator unsigned short const & () const { return value; }
    constexpr explicit operator unsigned short & () { return value; }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        HttpStatusCode const &,
        HttpStatusCode const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        HttpStatusCode const & lhs,
        HttpStatusCode const & rhs)
    noexcept(noexcept(std::declval<unsigned short const &>() <
        std::declval<unsigned short const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        HttpStatusCode const & lhs,
        HttpStatusCode const & rhs)
    noexcept(noexcept(std::declval<unsigned short const &>() <=
        std::declval<unsigned short const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        HttpStatusCode const & lhs,
        HttpStatusCode const & rhs)
    noexcept(noexcept(std::declval<unsigned short const &>() >
        std::declval<unsigned short const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        HttpStatusCode const & lhs,
        HttpStatusCode const & rhs)
    noexcept(noexcept(std::declval<unsigned short const &>() >=
        std::declval<unsigned short const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        HttpStatusCode const &,
        HttpStatusCode const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        HttpStatusCode const & lhs,
        HttpStatusCode const & rhs)
    noexcept(noexcept(std::declval<unsigned short const &>() ==
        std::declval<unsigned short const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        HttpStatusCode const & lhs,
        HttpStatusCode const & rhs)
    noexcept(noexcept(std::declval<unsigned short const &>() !=
        std::declval<unsigned short const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};

inline constexpr demo::constants::HttpStatusCode demo::constants::HttpStatusCode::bad_request = demo::constants::HttpStatusCode(400);

inline constexpr demo::constants::HttpStatusCode demo::constants::HttpStatusCode::created = demo::constants::HttpStatusCode(201);

inline constexpr demo::constants::HttpStatusCode demo::constants::HttpStatusCode::not_found = demo::constants::HttpStatusCode(404);

inline constexpr demo::constants::HttpStatusCode demo::constants::HttpStatusCode::ok = demo::constants::HttpStatusCode(200);

inline constexpr demo::constants::HttpStatusCode demo::constants::HttpStatusCode::server_error = demo::constants::HttpStatusCode(500);
} // namespace constants
} // namespace demo


namespace demo {
namespace constants {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::constants
 * - type_name: Priority
 * - description: int; !=, <, <=, ==, >, >=
 * - default_value: ""
 */
struct Priority
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    static const Priority critical;

    static const Priority high;

    static const Priority low;

    static const Priority medium;

    constexpr explicit Priority() = default;
    constexpr Priority(Priority const &) = default;
    constexpr Priority(Priority &&) = default;
    constexpr Priority & operator = (Priority const &) = default;
    constexpr Priority & operator = (Priority &&) = default;
    constexpr ~Priority() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Priority(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Priority const & lhs,
        Priority const & rhs)
    noexcept(noexcept(std::declval<int const&>() != std::declval<int const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        Priority const & lhs,
        Priority const & rhs)
    noexcept(noexcept(std::declval<int const&>() < std::declval<int const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        Priority const & lhs,
        Priority const & rhs)
    noexcept(noexcept(std::declval<int const&>() <= std::declval<int const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Priority const & lhs,
        Priority const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        Priority const & lhs,
        Priority const & rhs)
    noexcept(noexcept(std::declval<int const&>() > std::declval<int const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        Priority const & lhs,
        Priority const & rhs)
    noexcept(noexcept(std::declval<int const&>() >= std::declval<int const&>()))
    {
        return lhs.value >= rhs.value;
    }
};

inline constexpr demo::constants::Priority demo::constants::Priority::critical = demo::constants::Priority(4);

inline constexpr demo::constants::Priority demo::constants::Priority::high = demo::constants::Priority(3);

inline constexpr demo::constants::Priority demo::constants::Priority::low = demo::constants::Priority(1);

inline constexpr demo::constants::Priority demo::constants::Priority::medium = demo::constants::Priority(2);
} // namespace constants
} // namespace demo


namespace demo {
namespace inline_syntax {

/**
 * @brief Strong type wrapper for unsigned int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::inline_syntax
 * - type_name: RequestCount
 * - description: unsigned int; ++, --, <=>, ==
 * - default_value: ""
 */
struct RequestCount
: private atlas::strong_type_tag
{
    unsigned int value;

    using atlas_value_type = unsigned int;

    constexpr explicit RequestCount() = default;
    constexpr RequestCount(RequestCount const &) = default;
    constexpr RequestCount(RequestCount &&) = default;
    constexpr RequestCount & operator = (RequestCount const &) = default;
    constexpr RequestCount & operator = (RequestCount &&) = default;
    constexpr ~RequestCount() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<unsigned int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit RequestCount(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator unsigned int const & () const { return value; }
    constexpr explicit operator unsigned int & () { return value; }

    /**
     * Apply the prefix ++ operator to the wrapped object.
     */
    friend constexpr RequestCount &
    operator ++ (RequestCount & t)
    noexcept(noexcept(++std::declval<unsigned int&>()))
    {
        ++t.value;
        return t;
    }
    /**
     * Apply the postfix ++ operator to the wrapped object.
     */
    friend constexpr RequestCount
    operator ++ (RequestCount & t, int)
    noexcept(
        std::is_nothrow_copy_constructible<unsigned int>::value &&
        noexcept(++std::declval<unsigned int&>()))
    {
        auto result = t;
        ++t.value;
        return result;
    }

    /**
     * Apply the prefix -- operator to the wrapped object.
     */
    friend constexpr RequestCount &
    operator -- (RequestCount & t)
    noexcept(noexcept(--std::declval<unsigned int&>()))
    {
        --t.value;
        return t;
    }
    /**
     * Apply the postfix -- operator to the wrapped object.
     */
    friend constexpr RequestCount
    operator -- (RequestCount & t, int)
    noexcept(
        std::is_nothrow_copy_constructible<unsigned int>::value &&
        noexcept(--std::declval<unsigned int&>()))
    {
        auto result = t;
        --t.value;
        return result;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        RequestCount const &,
        RequestCount const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        RequestCount const & lhs,
        RequestCount const & rhs)
    noexcept(noexcept(std::declval<unsigned int const &>() <
        std::declval<unsigned int const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        RequestCount const & lhs,
        RequestCount const & rhs)
    noexcept(noexcept(std::declval<unsigned int const &>() <=
        std::declval<unsigned int const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        RequestCount const & lhs,
        RequestCount const & rhs)
    noexcept(noexcept(std::declval<unsigned int const &>() >
        std::declval<unsigned int const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        RequestCount const & lhs,
        RequestCount const & rhs)
    noexcept(noexcept(std::declval<unsigned int const &>() >=
        std::declval<unsigned int const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        RequestCount const &,
        RequestCount const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        RequestCount const & lhs,
        RequestCount const & rhs)
    noexcept(noexcept(std::declval<unsigned int const &>() ==
        std::declval<unsigned int const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        RequestCount const & lhs,
        RequestCount const & rhs)
    noexcept(noexcept(std::declval<unsigned int const &>() !=
        std::declval<unsigned int const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace inline_syntax
} // namespace demo


namespace demo {
namespace inline_syntax {

/**
 * @brief Strong type wrapper for std::chrono::seconds
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::inline_syntax
 * - type_name: SessionTimeout
 * - description: std::chrono::seconds; !=, <=>, ==
 * - default_value: ""
 */
struct SessionTimeout
: private atlas::strong_type_tag
{
    std::chrono::seconds value;

    using atlas_value_type = std::chrono::seconds;

    constexpr explicit SessionTimeout() = default;
    constexpr SessionTimeout(SessionTimeout const &) = default;
    constexpr SessionTimeout(SessionTimeout &&) = default;
    constexpr SessionTimeout & operator = (SessionTimeout const &) = default;
    constexpr SessionTimeout & operator = (SessionTimeout &&) = default;
    constexpr ~SessionTimeout() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::chrono::seconds, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit SessionTimeout(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::chrono::seconds const & () const { return value; }
    constexpr explicit operator std::chrono::seconds & () { return value; }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        SessionTimeout const &,
        SessionTimeout const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        SessionTimeout const & lhs,
        SessionTimeout const & rhs)
    noexcept(noexcept(std::declval<std::chrono::seconds const &>() <
        std::declval<std::chrono::seconds const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        SessionTimeout const & lhs,
        SessionTimeout const & rhs)
    noexcept(noexcept(std::declval<std::chrono::seconds const &>() <=
        std::declval<std::chrono::seconds const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        SessionTimeout const & lhs,
        SessionTimeout const & rhs)
    noexcept(noexcept(std::declval<std::chrono::seconds const &>() >
        std::declval<std::chrono::seconds const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        SessionTimeout const & lhs,
        SessionTimeout const & rhs)
    noexcept(noexcept(std::declval<std::chrono::seconds const &>() >=
        std::declval<std::chrono::seconds const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        SessionTimeout const &,
        SessionTimeout const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        SessionTimeout const & lhs,
        SessionTimeout const & rhs)
    noexcept(noexcept(std::declval<std::chrono::seconds const &>() ==
        std::declval<std::chrono::seconds const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        SessionTimeout const & lhs,
        SessionTimeout const & rhs)
    noexcept(noexcept(std::declval<std::chrono::seconds const &>() !=
        std::declval<std::chrono::seconds const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace inline_syntax
} // namespace demo


namespace demo {
namespace forwarding {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::forwarding
 * - type_name: SafeString
 * - description: std::string; forward=size,empty,length; !=, ==, hash
 * - default_value: ""
 */
struct SafeString
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit SafeString() = default;
    constexpr SafeString(SafeString const &) = default;
    constexpr SafeString(SafeString &&) = default;
    constexpr SafeString & operator = (SafeString const &) = default;
    constexpr SafeString & operator = (SafeString &&) = default;
    constexpr ~SafeString() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit SafeString(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward length to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * length member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto length(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.length(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.length(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.length(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto length(Args&&... args) const &
    noexcept(noexcept(value.length(std::forward<Args>(args)...)))
    -> decltype(value.length(std::forward<Args>(args)...))
    {
        return value.length(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) const &&
    noexcept(noexcept(std::move(value).length(std::forward<Args>(args)...)))
    -> decltype(std::move(value).length(std::forward<Args>(args)...))
    {
        return std::move(value).length(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &
    noexcept(noexcept(value.length(std::forward<Args>(args)...)))
    -> decltype(value.length(std::forward<Args>(args)...))
    {
        return value.length(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &&
    noexcept(noexcept(std::move(value).length(std::forward<Args>(args)...)))
    -> decltype(std::move(value).length(std::forward<Args>(args)...))
    {
        return std::move(value).length(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        SafeString const & lhs,
        SafeString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        SafeString const & lhs,
        SafeString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace forwarding
} // namespace demo


/**
 * @brief std::hash specialization for demo::forwarding::SafeString
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<demo::forwarding::SafeString>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (demo::forwarding::SafeString const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};

namespace demo {
namespace forwarding {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::forwarding
 * - type_name: DistanceValue
 * - description: double; forward=abs:magnitude; *, +, -, /, <=>
 * - default_value: ""
 */
struct DistanceValue
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    constexpr explicit DistanceValue() = default;
    constexpr DistanceValue(DistanceValue const &) = default;
    constexpr DistanceValue(DistanceValue &&) = default;
    constexpr DistanceValue & operator = (DistanceValue const &) = default;
    constexpr DistanceValue & operator = (DistanceValue &&) = default;
    constexpr ~DistanceValue() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit DistanceValue(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * @brief Forward abs to wrapped object (aliased as magnitude)
     *
     * This member function forwards all calls to the underlying type's
     * abs member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto magnitude(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.abs(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.abs(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.abs(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto magnitude(Args&&... args) const &
    noexcept(noexcept(value.abs(std::forward<Args>(args)...)))
    -> decltype(value.abs(std::forward<Args>(args)...))
    {
        return value.abs(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto magnitude(Args&&... args) const &&
    noexcept(noexcept(std::move(value).abs(std::forward<Args>(args)...)))
    -> decltype(std::move(value).abs(std::forward<Args>(args)...))
    {
        return std::move(value).abs(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto magnitude(Args&&... args) &
    noexcept(noexcept(value.abs(std::forward<Args>(args)...)))
    -> decltype(value.abs(std::forward<Args>(args)...))
    {
        return value.abs(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto magnitude(Args&&... args) &&
    noexcept(noexcept(std::move(value).abs(std::forward<Args>(args)...)))
    -> decltype(std::move(value).abs(std::forward<Args>(args)...))
    {
        return std::move(value).abs(std::forward<Args>(args)...);
    }
#endif

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr DistanceValue & operator *= (
        DistanceValue & lhs,
        DistanceValue const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr DistanceValue operator * (
        DistanceValue lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr DistanceValue & operator += (
        DistanceValue & lhs,
        DistanceValue const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr DistanceValue operator + (
        DistanceValue lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr DistanceValue & operator -= (
        DistanceValue & lhs,
        DistanceValue const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr DistanceValue operator - (
        DistanceValue lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr DistanceValue & operator /= (
        DistanceValue & lhs,
        DistanceValue const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr DistanceValue operator / (
        DistanceValue lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        DistanceValue const &,
        DistanceValue const &) = default;
#else
    /**
     * Comparison operators (C++17 fallback for spaceship operator).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator < (
        DistanceValue const & lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(std::declval<double const &>() <
        std::declval<double const &>()))
    {
        return lhs.value < rhs.value;
    }

    friend constexpr bool operator <= (
        DistanceValue const & lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(std::declval<double const &>() <=
        std::declval<double const &>()))
    {
        return lhs.value <= rhs.value;
    }

    friend constexpr bool operator > (
        DistanceValue const & lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(std::declval<double const &>() >
        std::declval<double const &>()))
    {
        return lhs.value > rhs.value;
    }

    friend constexpr bool operator >= (
        DistanceValue const & lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(std::declval<double const &>() >=
        std::declval<double const &>()))
    {
        return lhs.value >= rhs.value;
    }
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        DistanceValue const &,
        DistanceValue const &) = default;
#else
    /**
     * Equality comparison operators (C++17 fallback).
     * In C++20+, these are synthesized from operator<=>.
     */
    friend constexpr bool operator == (
        DistanceValue const & lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(std::declval<double const &>() ==
        std::declval<double const &>()))
    {
        return lhs.value == rhs.value;
    }

    friend constexpr bool operator != (
        DistanceValue const & lhs,
        DistanceValue const & rhs)
    noexcept(noexcept(std::declval<double const &>() !=
        std::declval<double const &>()))
    {
        return lhs.value != rhs.value;
    }
#endif
};
} // namespace forwarding
} // namespace demo


namespace demo {
namespace forwarding {

/**
 * @brief Strong type wrapper for std::map<std::string, std::string>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::forwarding
 * - type_name: ImmutableConfig
 * - description: std::map<std::string, std::string>; forward=const,at,find,size,empty; ==
 * - default_value: ""
 */
struct ImmutableConfig
: private atlas::strong_type_tag
{
    std::map<std::string, std::string> value;

    using atlas_value_type = std::map<std::string, std::string>;

    constexpr explicit ImmutableConfig() = default;
    constexpr ImmutableConfig(ImmutableConfig const &) = default;
    constexpr ImmutableConfig(ImmutableConfig &&) = default;
    constexpr ImmutableConfig & operator = (ImmutableConfig const &) = default;
    constexpr ImmutableConfig & operator = (ImmutableConfig &&) = default;
    constexpr ~ImmutableConfig() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::map<std::string, std::string>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ImmutableConfig(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::map<std::string, std::string> const & () const { return value; }
    constexpr explicit operator std::map<std::string, std::string> & () { return value; }

    /**
     * @brief Forward at to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * at member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto at(Args&&... args) const
    noexcept(noexcept(value.at(std::forward<Args>(args)...)))
    -> decltype(value.at(std::forward<Args>(args)...))
    {
        return value.at(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto empty(Args&&... args) const
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward find to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * find member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto find(Args&&... args) const
    noexcept(noexcept(value.find(std::forward<Args>(args)...)))
    -> decltype(value.find(std::forward<Args>(args)...))
    {
        return value.find(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto size(Args&&... args) const
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }





    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ImmutableConfig const & lhs,
        ImmutableConfig const & rhs)
    noexcept(noexcept(std::declval<std::map<std::string, std::string> const&>() == std::declval<std::map<std::string, std::string> const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace forwarding
} // namespace demo


namespace demo {
namespace forwarding {

/**
 * @brief Strong type wrapper for std::deque<std::string>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::forwarding
 * - type_name: TaskQueue
 * - description: std::deque<std::string>; forward=push_back:enqueue,pop_front:dequeue,size,empty; ==, iterable
 * - default_value: ""
 */
struct TaskQueue
: private atlas::strong_type_tag
{
    std::deque<std::string> value;

    using atlas_value_type = std::deque<std::string>;

    constexpr explicit TaskQueue() = default;
    constexpr TaskQueue(TaskQueue const &) = default;
    constexpr TaskQueue(TaskQueue &&) = default;
    constexpr TaskQueue & operator = (TaskQueue const &) = default;
    constexpr TaskQueue & operator = (TaskQueue &&) = default;
    constexpr ~TaskQueue() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::deque<std::string>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit TaskQueue(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::deque<std::string> const & () const { return value; }
    constexpr explicit operator std::deque<std::string> & () { return value; }

    /**
     * Iterator type aliases for container-like interface.
     */
    using iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::deque<std::string>&>()));
    using const_iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::deque<std::string> const&>()));
    using value_type = typename std::remove_reference<decltype(
        *atlas::atlas_detail::begin_(
            std::declval<std::deque<std::string>&>()))>::type;

    /**
     * Member functions for iterator access.
     * Enables both explicit calls (e.g., s.begin()) and range-based for loops.
     * Uses ADL-enabled helpers that work in decltype/noexcept contexts.
     */
    constexpr auto begin()
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end()
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    constexpr auto begin() const
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end() const
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    /**
     * @brief Forward pop_front to wrapped object (aliased as dequeue)
     *
     * This member function forwards all calls to the underlying type's
     * pop_front member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto dequeue(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.pop_front(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.pop_front(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.pop_front(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto dequeue(Args&&... args) const &
    noexcept(noexcept(value.pop_front(std::forward<Args>(args)...)))
    -> decltype(value.pop_front(std::forward<Args>(args)...))
    {
        return value.pop_front(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto dequeue(Args&&... args) const &&
    noexcept(noexcept(std::move(value).pop_front(std::forward<Args>(args)...)))
    -> decltype(std::move(value).pop_front(std::forward<Args>(args)...))
    {
        return std::move(value).pop_front(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto dequeue(Args&&... args) &
    noexcept(noexcept(value.pop_front(std::forward<Args>(args)...)))
    -> decltype(value.pop_front(std::forward<Args>(args)...))
    {
        return value.pop_front(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto dequeue(Args&&... args) &&
    noexcept(noexcept(std::move(value).pop_front(std::forward<Args>(args)...)))
    -> decltype(std::move(value).pop_front(std::forward<Args>(args)...))
    {
        return std::move(value).pop_front(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward push_back to wrapped object (aliased as enqueue)
     *
     * This member function forwards all calls to the underlying type's
     * push_back member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto enqueue(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.push_back(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.push_back(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.push_back(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto enqueue(Args&&... args) const &
    noexcept(noexcept(value.push_back(std::forward<Args>(args)...)))
    -> decltype(value.push_back(std::forward<Args>(args)...))
    {
        return value.push_back(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto enqueue(Args&&... args) const &&
    noexcept(noexcept(std::move(value).push_back(std::forward<Args>(args)...)))
    -> decltype(std::move(value).push_back(std::forward<Args>(args)...))
    {
        return std::move(value).push_back(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto enqueue(Args&&... args) &
    noexcept(noexcept(value.push_back(std::forward<Args>(args)...)))
    -> decltype(value.push_back(std::forward<Args>(args)...))
    {
        return value.push_back(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto enqueue(Args&&... args) &&
    noexcept(noexcept(std::move(value).push_back(std::forward<Args>(args)...)))
    -> decltype(std::move(value).push_back(std::forward<Args>(args)...))
    {
        return std::move(value).push_back(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        TaskQueue const & lhs,
        TaskQueue const & rhs)
    noexcept(noexcept(std::declval<std::deque<std::string> const&>() == std::declval<std::deque<std::string> const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace forwarding
} // namespace demo


namespace demo {
namespace forwarding {

/**
 * @brief Strong type wrapper for std::unique_ptr<int>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::forwarding
 * - type_name: ResourceHandle
 * - description: std::unique_ptr<int>; forward=get,reset; ->, @, bool
 * - default_value: ""
 */
struct ResourceHandle
: private atlas::strong_type_tag
{
    std::unique_ptr<int> value;

    using atlas_value_type = std::unique_ptr<int>;

    constexpr explicit ResourceHandle() = default;
    constexpr ResourceHandle(ResourceHandle const &) = default;
    constexpr ResourceHandle(ResourceHandle &&) = default;
    constexpr ResourceHandle & operator = (ResourceHandle const &) = default;
    constexpr ResourceHandle & operator = (ResourceHandle &&) = default;
    constexpr ~ResourceHandle() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::unique_ptr<int>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ResourceHandle(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::unique_ptr<int> const & () const { return value; }
    constexpr explicit operator std::unique_ptr<int> & () { return value; }

    /**
     * Return the result of casting the wrapped object to bool.
     */
    constexpr explicit operator bool () const
    noexcept(noexcept(static_cast<bool>(
        std::declval<std::unique_ptr<int> const&>())))
    {
        return static_cast<bool>(value);
    }

    /**
     * Dereference operator - forwards to wrapped type's operator* if available,
     * otherwise returns reference to wrapped value.
     *
     * Pointer types: dereferences the pointer (returns *ptr)
     * Pointer-like types (smart pointers, iterators, optional): returns *value
     * Other types: returns reference to value (fallback)
     */
    template <typename T = atlas::atlas_detail::const_>
    constexpr auto operator * () const
    -> decltype(atlas::atlas_detail::star_impl<T>(
        value,
        atlas::atlas_detail::PriorityTag<1>{}))
    {
        return atlas::atlas_detail::star_impl<T>(
            value,
            atlas::atlas_detail::PriorityTag<1>{});
    }

    template <typename T = atlas::atlas_detail::mutable_>
    constexpr auto operator * ()
    -> decltype(atlas::atlas_detail::star_impl<T>(
        value,
        atlas::atlas_detail::PriorityTag<10>{}))
    {
        return atlas::atlas_detail::star_impl<T>(
            value,
            atlas::atlas_detail::PriorityTag<10>{});
    }

    /**
     * Arrow operator - forwards to wrapped type if it's a pointer or
     * pointer-like, otherwise returns pointer to wrapped value.
     *
     * pointer types: returns the pointer itself (built-in -> handles the rest)
     * pointer-like types (smart pointers): returns value.operator->()
     * other types: returns &value
     */
    template <typename T = atlas::atlas_detail::const_>
    constexpr auto operator -> () const
    -> decltype(atlas::atlas_detail::arrow_impl<T>(
        value,
        atlas::atlas_detail::PriorityTag<1>{}))
    {
        return atlas::atlas_detail::arrow_impl<T>(
            value,
            atlas::atlas_detail::PriorityTag<1>{});
    }

    template <typename T = atlas::atlas_detail::mutable_>
    constexpr auto operator -> ()
    -> decltype(atlas::atlas_detail::arrow_impl<T>(
        value,
        atlas::atlas_detail::PriorityTag<1>{}))
    {
        return atlas::atlas_detail::arrow_impl<T>(
            value,
            atlas::atlas_detail::PriorityTag<1>{});
    }

    /**
     * @brief Forward get to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * get member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto get(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.get(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.get(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.get(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto get(Args&&... args) const &
    noexcept(noexcept(value.get(std::forward<Args>(args)...)))
    -> decltype(value.get(std::forward<Args>(args)...))
    {
        return value.get(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto get(Args&&... args) const &&
    noexcept(noexcept(std::move(value).get(std::forward<Args>(args)...)))
    -> decltype(std::move(value).get(std::forward<Args>(args)...))
    {
        return std::move(value).get(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto get(Args&&... args) &
    noexcept(noexcept(value.get(std::forward<Args>(args)...)))
    -> decltype(value.get(std::forward<Args>(args)...))
    {
        return value.get(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto get(Args&&... args) &&
    noexcept(noexcept(std::move(value).get(std::forward<Args>(args)...)))
    -> decltype(std::move(value).get(std::forward<Args>(args)...))
    {
        return std::move(value).get(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward reset to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * reset member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto reset(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.reset(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.reset(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.reset(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto reset(Args&&... args) const &
    noexcept(noexcept(value.reset(std::forward<Args>(args)...)))
    -> decltype(value.reset(std::forward<Args>(args)...))
    {
        return value.reset(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto reset(Args&&... args) const &&
    noexcept(noexcept(std::move(value).reset(std::forward<Args>(args)...)))
    -> decltype(std::move(value).reset(std::forward<Args>(args)...))
    {
        return std::move(value).reset(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto reset(Args&&... args) &
    noexcept(noexcept(value.reset(std::forward<Args>(args)...)))
    -> decltype(value.reset(std::forward<Args>(args)...))
    {
        return value.reset(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto reset(Args&&... args) &&
    noexcept(noexcept(std::move(value).reset(std::forward<Args>(args)...)))
    -> decltype(std::move(value).reset(std::forward<Args>(args)...))
    {
        return std::move(value).reset(std::forward<Args>(args)...);
    }
#endif
};
} // namespace forwarding
} // namespace demo


namespace demo {
namespace forwarding {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::forwarding
 * - type_name: ManagedString
 * - description: std::string; !=, ==, hash
 * - default_value: ""
 */
struct ManagedString
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit ManagedString() = default;
    constexpr ManagedString(ManagedString const &) = default;
    constexpr ManagedString(ManagedString &&) = default;
    constexpr ManagedString & operator = (ManagedString const &) = default;
    constexpr ManagedString & operator = (ManagedString &&) = default;
    constexpr ~ManagedString() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ManagedString(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward append to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * append member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto append(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.append(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.append(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.append(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto append(Args&&... args) const &
    noexcept(noexcept(value.append(std::forward<Args>(args)...)))
    -> decltype(value.append(std::forward<Args>(args)...))
    {
        return value.append(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto append(Args&&... args) const &&
    noexcept(noexcept(std::move(value).append(std::forward<Args>(args)...)))
    -> decltype(std::move(value).append(std::forward<Args>(args)...))
    {
        return std::move(value).append(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto append(Args&&... args) &
    noexcept(noexcept(value.append(std::forward<Args>(args)...)))
    -> decltype(value.append(std::forward<Args>(args)...))
    {
        return value.append(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto append(Args&&... args) &&
    noexcept(noexcept(std::move(value).append(std::forward<Args>(args)...)))
    -> decltype(std::move(value).append(std::forward<Args>(args)...))
    {
        return std::move(value).append(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward clear to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * clear member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto clear(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.clear(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.clear(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.clear(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object (aliased as is_empty)
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto is_empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object (aliased as length)
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto length(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto length(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        ManagedString const & lhs,
        ManagedString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ManagedString const & lhs,
        ManagedString const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace forwarding
} // namespace demo


/**
 * @brief std::hash specialization for demo::forwarding::ManagedString
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<demo::forwarding::ManagedString>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (demo::forwarding::ManagedString const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};
#endif // EXAMPLE_DFF719F56EAABCC3D8D523E2BB55DE14FD8EF3D1
