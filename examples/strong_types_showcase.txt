# Strong Type Generator Showcase
# This file demonstrates various features and corner cases

# File-level configuration
guard_prefix=EXAMPLE
guard_separator=_
upcase_guard=true

# Profile definitions - reusable feature bundles
profile=NUMERIC; +, -, *, /
profile=COMPARABLE; ==, !=, <, <=, >, >=
profile=HASHABLE; ==, !=, hash
profile=STREAMABLE; out, in

# Profile demo: Using profiles to reduce verbosity
[type]
kind=struct
namespace=demo::profiles
name=Price
description=strong double; {NUMERIC}, {COMPARABLE}, hash
default_value=0.0

[type]
kind=struct
namespace=demo::profiles
name=Quantity
description=strong int; {NUMERIC}, {HASHABLE}
default_value=0

[type]
kind=struct
namespace=demo::profiles
name=Identifier
description=strong std::string; {HASHABLE}, {STREAMABLE}

[type]
kind=struct
namespace=finance::core
name=Money
description=strong double; +, -, *, /, ==, !=, <, <=, >, >=, <<, hash
default_value=0.0

[type]
kind=class
namespace=ids::v1
name=UserId
description=strong unsigned long; ==, !=, <=>, hash, no-constexpr-hash
default_value=0

[type]
kind=struct
namespace=physics::units
name=Meters
description=strong double; +, -, *, /, u-, ==, !=, <=>

[type]
kind=struct
namespace=physics::units
name=Seconds
description=strong double; +, -, *, /, u-, ==, !=, <=>

[type]
kind=struct
namespace=physics::units
name=MetersPerSecond
description=strong double; +, -, *, /, u-, ==, !=, <=>

[type]
kind=struct
namespace=data
name=ByteCount
description=strong size_t; +, -, *, /, %, ==, !=, <, <=, >, >=, ++, --, <<
default_value=0

[type]
kind=struct
namespace=graphics::color
name=RedChannel
description=strong uint8_t; +, -, *, /, &, |, ^, ~, ==, !=, <=>
default_value=0

[type]
kind=class
namespace=security
name=EncryptedData
description=strong std::string; ==, !=, <<, hash

[type]
kind=struct
namespace=geo
name=Latitude
description=strong double; ==, !=, <, <=, >, >=, u-, <<
default_value=0.0

[type]
kind=struct
namespace=geo
name=Longitude
description=strong double; ==, !=, <, <=, >, >=, u-, <<
default_value=0.0

[type]
kind=struct
namespace=concurrency
name=ThreadId
description=strong int; ==, !=, <<, hash, no-constexpr, no-constexpr-hash

[type]
kind=struct
namespace=math::rational
name=Numerator
description=strong long; +, -, *, ==, !=, <=>

[type]
kind=struct
namespace=math::rational
name=Denominator
description=strong long; *, /, ==, !=, <=>
default_value=1

[type]
kind=struct
namespace=net::ipv4
name=Octet
description=strong uint8_t; &, |, ^, ~, <<, >>, ==, !=
default_value=0

[type]
kind=class
namespace=app::config
name=ConfigKey
description=strong std::string; +, ==, !=, <, <<, hash, []

[type]
kind=struct
namespace=containers
name=IterableString
description=strong std::string; ==, !=, iterable
default_value=""

[type]
kind=struct
namespace=containers
name=IntVector
description=strong std::vector<int>; ==, iterable, []

[type]
kind=class
namespace=containers
name=DataBuffer
description=strong std::vector<uint8_t>; ==, !=, iterable, [], hash

[type]
kind=struct
namespace=formatting
name=FormattedString
description=strong std::string; ==, !=, fmt, out, hash

[type]
kind=struct
namespace=formatting
name=FormattedInt
description=strong int; ==, fmt

[type]
kind=struct
namespace=text
name=AssignableString
description=strong std::string; ==, !=, assign, out

[type]
kind=struct
namespace=config
name=AssignablePort
description=strong int; ==, !=, assign

[type]
kind=struct
namespace=text
name=CastableString
description=strong std::string; ==, !=, cast<std::string_view>

[type]
kind=class
namespace=text
name=ViewableText
description=strong std::string; ==, explicit_cast<std::string_view>, cast<bool>

[type]
kind=struct
namespace=flags
name=EnableFlag
description=strong int; ==, implicit_cast<bool>

# Showcase of newer features:

# Optional 'strong' keyword - both syntaxes are equivalent
[type]
kind=struct
namespace=demo::optional_strong
name=Temperature
description=double; +, -, ==, <=>
default_value=20.0

# Global namespace support - generates type in global scope
[type]
kind=struct
namespace=::
name=GlobalEventId
description=unsigned long; ==, !=, hash

# Named constants - similar to scoped enum values
[type]
kind=struct
namespace=demo::constants
name=HttpStatusCode
description=unsigned short; ==, !=, <=>
constants=ok:200; created: 201; bad_request :400; not_found : 404; server_error:500

[type]
kind=struct
namespace=demo::constants
name=Priority
description=int; ==, !=, <, <=, >, >=
constants=low:1
constants=medium: 2
constants=high :3
constants=critical : 4

[RequestCount]
kind=struct
namespace=demo::inline_syntax
description=unsigned int; ++, --, ==, <=>

[struct SessionTimeout]
namespace=demo::inline_syntax
description=std::chrono::seconds; ==, !=, <=>

# Member Function Forwarding - expose member functions from wrapped types

# Basic forwarding - string wrapper with query member functions
[type]
kind=struct
namespace=demo::forwarding
name=SafeString
description=std::string; forward=size,empty,length; ==, !=, hash

# Member Function aliasing - rename forwarded member functions
[type]
kind=struct
namespace=demo::forwarding
name=DistanceValue
description=double; forward=abs:magnitude; +, -, *, /, <=>

# Const-only forwarding - prevent modification
[type]
kind=struct
namespace=demo::forwarding
name=ImmutableConfig
description=std::map<std::string, std::string>; forward=const,at,find,size,empty; ==

# Container forwarding with custom names
[type]
kind=struct
namespace=demo::forwarding
name=TaskQueue
description=std::deque<std::string>; forward=push_back:enqueue,pop_front:dequeue,size,empty; ==, iterable

# Smart pointer forwarding
[type]
kind=struct
namespace=demo::forwarding
name=ResourceHandle
description=std::unique_ptr<int>; forward=get,reset; ->, @, bool

# Multiple forward lines for organization
[type]
kind=struct
namespace=demo::forwarding
name=ManagedString
description=std::string; ==, !=, hash
forward=size:length,empty:is_empty
forward=clear,append
