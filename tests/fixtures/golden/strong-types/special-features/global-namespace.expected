#ifndef WJH_IPC_61EE62EBE30746DAE30473AE1BBDA352F7C98398
#define WJH_IPC_61EE62EBE30746DAE30473AE1BBDA352F7C98398

// ======================================================================
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ----------------------------------------------------------------------
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// This source file has been generated by Atlas Strong Type Generator v0.1.0
// https://github.com/jodyhagins/Atlas
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// ----------------------------------------------------------------------
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ======================================================================

#if __has_include(<version>)
#include <version>
#endif
#include <memory>
#include <type_traits>
#include <utility>

#ifndef WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90
#define WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90

// ======================================================================
// ATLAS STRONG TYPE BOILERPLATE
// ----------------------------------------------------------------------
//
// This section provides the infrastructure for Atlas strong types.
// It is identical across all Atlas-generated files and uses a shared
// header guard (WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90) to ensure
// the boilerplate is only included once even when multiple generated
// files are used in the same translation unit.
//
// The boilerplate is intentionally inlined to make generated code
// self-contained with zero external dependencies.
//
// Components:
// - atlas::strong_type_tag: Base class for strong types
// - atlas::value(): Universal value accessor for strong types
// - atlas_detail::*: Internal implementation utilities
//
// For projects using multiple Atlas-generated files, this boilerplate
// will only be compiled once per translation unit thanks to the shared
// header guard below.
//
// ----------------------------------------------------------------------
// DO NOT EDIT THIS SECTION
// ======================================================================

// Atlas feature detection macros
#ifndef ATLAS_NODISCARD
#if defined(__cpp_attributes) && __cpp_attributes >= 201603L
#define ATLAS_NODISCARD [[nodiscard]]
#else
#define ATLAS_NODISCARD
#endif
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
#include <compare>
#endif
#include <type_traits>
#include <utility>

namespace atlas {

struct strong_type_tag
{
#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    friend auto operator <=> (
        strong_type_tag const &,
        strong_type_tag const &) = default;
#endif
};

struct value_tag
{ };

namespace atlas_detail {

template <typename... Ts>
struct make_void
{
    using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename T, typename = void>
struct IsAtlasType
: std::false_type
{ };

template <typename T>
struct IsAtlasType<T, void_t<typename T::atlas_value_type>>
: std::true_type
{ };

template <std::size_t N>
struct PriorityTag
: PriorityTag<N - 1>
{ };

template <>
struct PriorityTag<0u>
{ };

using value_tag = PriorityTag<3>;

template <bool B>
using bool_c = std::integral_constant<bool, B>;
template <typename T>
using bool_ = bool_c<T::value>;
template <typename T>
using not_ = bool_c<not T::value>;
template <typename T, typename U>
using and_ = bool_c<T::value && U::value>;
template <typename T>
using is_lref = std::is_lvalue_reference<T>;
template <typename T, typename U = void>
using enable_if = typename std::enable_if<T::value, U>::type;

template <typename T>
using _t = typename T::type;

void atlas_value();

template <typename T>
constexpr T &
value(T & val, PriorityTag<0>)
{
    return val;
}

template <typename T, typename U = typename T::atlas_value_type>
using val_t = _t<std::conditional<std::is_const<T>::value, U const &, U &>>;

template <typename T, typename U = val_t<T>>
constexpr auto
value(T & val, PriorityTag<1>)
-> decltype(atlas::atlas_detail::value(static_cast<U>(val), value_tag{}))
{
    return atlas::atlas_detail::value(static_cast<U>(val), value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<2>)
-> decltype(atlas_value(t, atlas::value_tag{}))
{
    return atlas_value(t, atlas::value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<3>)
-> decltype(atlas_value(t))
{
    return atlas_value(t);
}

class Value
{
    template <
        typename U,
        typename T,
        typename V = _t<std::conditional<is_lref<U &&>::value, T &, T>>>
    static constexpr V rval(T && t)
    {
        return t;
    }

public:
    template <typename T>
    constexpr auto operator () (T && t) const
    -> decltype(rval<T>(atlas_detail::value(t, atlas_detail::value_tag{})))
    {
        return rval<T>(atlas_detail::value(t, atlas_detail::value_tag{}));
    }
};

void begin();
void end();

template <typename T>
constexpr auto
begin_(T && t) noexcept(noexcept(begin(std::forward<T>(t))))
-> decltype(begin(std::forward<T>(t)))
{
    return begin(std::forward<T>(t));
}

template <typename T>
constexpr auto
end_(T && t) noexcept(noexcept(end(std::forward<T>(t))))
-> decltype(end(std::forward<T>(t)))
{
    return end(std::forward<T>(t));
}
// Detects if T is a pointer or pointer-like type (has operator->)

template <typename T>
class is_arrow_operable
{
    template <typename U>
    static auto test(int)
    -> decltype(std::declval<U&>().operator->(), std::true_type{});

    template <typename U>
    static auto test(...) -> std::false_type;

public:
    static constexpr bool value = decltype(test<T>(0))::value ||
        std::is_pointer<T>::value;
};

template <typename T>
class is_arrow_operable_const
{
    template <typename U>
    static auto test(int)
    -> decltype(std::declval<U const&>().operator->(), std::true_type{});

    template <typename U>
    static auto test(...) -> std::false_type;

public:
    static constexpr bool value = decltype(test<T>(0))::value ||
        std::is_pointer<T>::value;
};

template <typename T>
using has_arrow_operator = is_arrow_operable<T>;

template <typename T>
using has_arrow_operator_const = is_arrow_operable_const<T>;

} // namespace atlas_detail

#if defined(__cpp_inline_variables) && __cpp_inline_variables >= 201606L
inline constexpr auto value = atlas_detail::Value{};
#else
template <typename T>
constexpr auto
value(T && t)
-> decltype(atlas_detail::Value{}(std::forward<T>(t)))
{
    return atlas_detail::Value{}(std::forward<T>(t));
}
#endif

} // namespace atlas

#endif // WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////


namespace wjh {
namespace ipc {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: wjh::ipc
 * - type_name: Distance
 * - description: strong double; *, +, -, /, <=>
 * - default_value: "0.0"
 */
struct Distance
: private atlas::strong_type_tag
{
    double value{0.0};

    using atlas_value_type = double;

    constexpr explicit Distance() = default;
    constexpr Distance(Distance const &) = default;
    constexpr Distance(Distance &&) = default;
    constexpr Distance & operator = (Distance const &) = default;
    constexpr Distance & operator = (Distance &&) = default;
    constexpr ~Distance() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Distance(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Distance & operator *= (
        Distance & lhs,
        Distance const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() *= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Distance operator * (
        Distance lhs,
        Distance const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Distance & operator += (
        Distance & lhs,
        Distance const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Distance operator + (
        Distance lhs,
        Distance const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Distance & operator -= (
        Distance & lhs,
        Distance const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Distance operator - (
        Distance lhs,
        Distance const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Apply / assignment to the wrapped objects.
     */
    friend constexpr Distance & operator /= (
        Distance & lhs,
        Distance const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() /= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value /= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator / to the wrapped object.
     */
    friend constexpr Distance operator / (
        Distance lhs,
        Distance const & rhs)
    noexcept(noexcept(lhs /= rhs))
    {
        lhs /= rhs;
        return lhs;
    }

    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Distance const &,
        Distance const &) = default;

    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Distance const &,
        Distance const &) = default;
};
} // namespace ipc
} // namespace wjh


namespace wjh {
namespace ipc {

/**
 * @brief Strong type wrapper for size_t
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: wjh::ipc
 * - type_name: Handle
 * - description: strong size_t; !=, ->, ==, bool
 * - default_value: ""
 */
struct Handle
: private atlas::strong_type_tag
{
    size_t value;

    using atlas_value_type = size_t;

    constexpr explicit Handle() = default;
    constexpr Handle(Handle const &) = default;
    constexpr Handle(Handle &&) = default;
    constexpr Handle & operator = (Handle const &) = default;
    constexpr Handle & operator = (Handle &&) = default;
    constexpr ~Handle() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<size_t, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Handle(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator size_t const & () const { return value; }
    constexpr explicit operator size_t & () { return value; }

    /**
     * Return the result of casting the wrapped object to bool.
     */
    constexpr explicit operator bool () const
    noexcept(noexcept(static_cast<bool>(
        std::declval<size_t const&>())))
    {
        return static_cast<bool>(value);
    }

    /**
     * Arrow operator - forwards to wrapped type if it's a pointer or
     * pointer-like, otherwise returns pointer to wrapped value.
     *
     * pointer types: returns the pointer itself (built-in -> handles the rest)
     * pointer-like types (smart pointers): returns value.operator->()
     * other types: returns &value
     */
private:
    // forward for raw pointers (const) - return the pointer itself
    template <typename T>
    static constexpr T
    arrow_impl(T const & v, std::true_type /* is_pointer */)
    {
        return v;
    }

    // forward for pointer-like types (const) - call their operator->
    template <typename T>
    static constexpr auto
    arrow_impl(T const & v, std::false_type /* is_pointer */)
    -> decltype(v.operator->())
    {
        return v.operator->();
    }

    // forward for raw pointers (non-const) - return the pointer itself
    template <typename T>
    static constexpr T
    arrow_impl(T & v, std::true_type /* is_pointer */)
    {
        return v;
    }

    // forward for pointer-like types (non-const) - call their operator->
    template <typename T>
    static constexpr auto
    arrow_impl(T & v, std::false_type /* is_pointer */)
    -> decltype(v.operator->())
    {
        return v.operator->();
    }

public:
    // Forward to wrapped type if it's arrow-operable (const)
    template <typename T = size_t>
    constexpr auto operator -> () const
    -> typename std::enable_if<
        atlas::atlas_detail::has_arrow_operator_const<T>::value,
        decltype(arrow_impl(
            std::declval<T const&>(),
            typename std::is_pointer<T>::type{}))>::type
    {
        return arrow_impl(value, typename std::is_pointer<T>::type{});
    }

    // Forward to wrapped type if it's arrow-operable (non-const)
    template <typename T = size_t>
    constexpr auto operator -> ()
    -> typename std::enable_if<
        atlas::atlas_detail::has_arrow_operator<T>::value,
        decltype(arrow_impl(
            std::declval<T&>(),
            typename std::is_pointer<T>::type{}))>::type
    {
        return arrow_impl(value, typename std::is_pointer<T>::type{});
    }

    // Fallback: return pointer to wrapped value (const)
    template <typename T = size_t>
    constexpr auto operator -> () const noexcept
    -> typename std::enable_if<
        not atlas::atlas_detail::has_arrow_operator_const<T>::value,
        T const *>::type
    {
        return std::addressof(value);
    }

    // Fallback: return pointer to wrapped value (non-const)
    template <typename T = size_t>
    constexpr auto operator -> () noexcept
    -> typename std::enable_if<
        not atlas::atlas_detail::has_arrow_operator<T>::value,
        T *>::type
    {
        return std::addressof(value);
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Handle const & lhs,
        Handle const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() != std::declval<size_t const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Handle const & lhs,
        Handle const & rhs)
    noexcept(noexcept(std::declval<size_t const&>() == std::declval<size_t const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace ipc
} // namespace wjh

#endif // WJH_IPC_61EE62EBE30746DAE30473AE1BBDA352F7C98398

