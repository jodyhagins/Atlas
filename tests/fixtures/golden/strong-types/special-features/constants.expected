#ifndef TEST_CONSTANTS_85359192D3C5D17564783A5967AC0F3FA9EB40E6
#define TEST_CONSTANTS_85359192D3C5D17564783A5967AC0F3FA9EB40E6

// ======================================================================
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ----------------------------------------------------------------------
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// This source file has been generated by Atlas Strong Type Generator v0.1.0
// https://github.com/jodyhagins/Atlas
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// ----------------------------------------------------------------------
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ======================================================================

#if __has_include(<version>)
#include <version>
#endif
#include <string>
#include <type_traits>
#include <utility>

#ifndef WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90
#define WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90

// ======================================================================
// ATLAS STRONG TYPE BOILERPLATE
// ----------------------------------------------------------------------
//
// This section provides the infrastructure for Atlas strong types.
// It is identical across all Atlas-generated files and uses a shared
// header guard (WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90) to ensure
// the boilerplate is only included once even when multiple generated
// files are used in the same translation unit.
//
// The boilerplate is intentionally inlined to make generated code
// self-contained with zero external dependencies.
//
// Components:
// - atlas::strong_type_tag: Base class for strong types
// - atlas::value(): Universal value accessor for strong types
// - atlas_detail::*: Internal implementation utilities
//
// For projects using multiple Atlas-generated files, this boilerplate
// will only be compiled once per translation unit thanks to the shared
// header guard below.
//
// ----------------------------------------------------------------------
// DO NOT EDIT THIS SECTION
// ======================================================================

// Atlas feature detection macros
#ifndef ATLAS_NODISCARD
#if defined(__cpp_attributes) && __cpp_attributes >= 201603L
#define ATLAS_NODISCARD [[nodiscard]]
#else
#define ATLAS_NODISCARD
#endif
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
#include <compare>
#endif

namespace atlas {

struct strong_type_tag
{
#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    friend auto operator <=> (
        strong_type_tag const &,
        strong_type_tag const &) = default;
#endif
};

struct value_tag
{ };

namespace atlas_detail {

template <typename... Ts>
struct make_void
{
    using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename T, typename = void>
struct IsAtlasType
: std::false_type
{ };

template <typename T>
struct IsAtlasType<T, void_t<typename T::atlas_value_type>>
: std::true_type
{ };

template <std::size_t N>
struct PriorityTag
: PriorityTag<N - 1>
{ };

template <>
struct PriorityTag<0u>
{ };

using value_tag = PriorityTag<3>;

template <bool B>
using bool_c = std::integral_constant<bool, B>;
template <typename T>
using bool_ = bool_c<T::value>;
template <typename T>
using not_ = bool_c<not T::value>;
template <typename T, typename U>
using and_ = bool_c<T::value && U::value>;
template <typename T>
using is_lref = std::is_lvalue_reference<T>;
template <typename T, typename U = void>
using enable_if = typename std::enable_if<T::value, U>::type;

template <typename T>
using _t = typename T::type;

void atlas_value();

template <typename T>
constexpr T &
value(T & val, PriorityTag<0>)
{
    return val;
}

template <typename T, typename U = typename T::atlas_value_type>
using val_t = _t<std::conditional<std::is_const<T>::value, U const &, U &>>;

template <typename T, typename U = val_t<T>>
constexpr auto
value(T & val, PriorityTag<1>)
-> decltype(atlas::atlas_detail::value(static_cast<U>(val), value_tag{}))
{
    return atlas::atlas_detail::value(static_cast<U>(val), value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<2>)
-> decltype(atlas_value(t, atlas::value_tag{}))
{
    return atlas_value(t, atlas::value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<3>)
-> decltype(atlas_value(t))
{
    return atlas_value(t);
}

class Value
{
    template <
        typename U,
        typename T,
        typename V = _t<std::conditional<is_lref<U &&>::value, T &, T>>>
    static constexpr V rval(T && t)
    {
        return t;
    }

public:
    template <typename T>
    constexpr auto operator () (T && t) const
    -> decltype(rval<T>(atlas_detail::value(t, atlas_detail::value_tag{})))
    {
        return rval<T>(atlas_detail::value(t, atlas_detail::value_tag{}));
    }
};

void begin();
void end();

template <typename T>
constexpr auto
begin_(T && t) noexcept(noexcept(begin(std::forward<T>(t))))
-> decltype(begin(std::forward<T>(t)))
{
    return begin(std::forward<T>(t));
}

template <typename T>
constexpr auto
end_(T && t) noexcept(noexcept(end(std::forward<T>(t))))
-> decltype(end(std::forward<T>(t)))
{
    return end(std::forward<T>(t));
}

} // namespace atlas_detail

#if defined(__cpp_inline_variables) && __cpp_inline_variables >= 201606L
inline constexpr auto value = atlas_detail::Value{};
#else
template <typename T>
constexpr auto
value(T && t)
-> decltype(atlas_detail::Value{}(std::forward<T>(t)))
{
    return atlas_detail::Value{}(std::forward<T>(t));
}
#endif

} // namespace atlas

#endif // WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////


namespace math {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: math
 * - type_name: Angle
 * - description: strong double; !=, +, -, ==
 * - default_value: ""
 */
struct Angle
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    static const Angle pi;

    static const Angle tau;

    static const Angle zero;

    constexpr explicit Angle() = default;
    constexpr Angle(Angle const &) = default;
    constexpr Angle(Angle &&) = default;
    constexpr Angle & operator = (Angle const &) = default;
    constexpr Angle & operator = (Angle &&) = default;
    constexpr ~Angle() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Angle(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Angle & operator += (
        Angle & lhs,
        Angle const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Angle operator + (
        Angle lhs,
        Angle const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Angle & operator -= (
        Angle & lhs,
        Angle const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Angle operator - (
        Angle lhs,
        Angle const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Angle const & lhs,
        Angle const & rhs)
    noexcept(noexcept(std::declval<double const&>() != std::declval<double const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Angle const & lhs,
        Angle const & rhs)
    noexcept(noexcept(std::declval<double const&>() == std::declval<double const&>()))
    {
        return lhs.value == rhs.value;
    }
};

inline constexpr math::Angle math::Angle::pi = math::Angle(3.14159);

inline constexpr math::Angle math::Angle::tau = math::Angle(6.28318);

inline constexpr math::Angle math::Angle::zero = math::Angle(0.0);
} // namespace math


namespace text {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: text
 * - type_name: StringConstant
 * - description: strong std::string; !=, ==
 * - default_value: ""
 */
struct StringConstant
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    static const StringConstant default_name;

    static const StringConstant empty;

    constexpr explicit StringConstant() = default;
    constexpr StringConstant(StringConstant const &) = default;
    constexpr StringConstant(StringConstant &&) = default;
    constexpr StringConstant & operator = (StringConstant const &) = default;
    constexpr StringConstant & operator = (StringConstant &&) = default;
    constexpr ~StringConstant() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit StringConstant(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        StringConstant const & lhs,
        StringConstant const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        StringConstant const & lhs,
        StringConstant const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};

inline constexpr text::StringConstant text::StringConstant::default_name = text::StringConstant("unknown");

inline constexpr text::StringConstant text::StringConstant::empty = text::StringConstant("");
} // namespace text


namespace test {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: NumericValue
 * - description: strong int; +, -, ==
 * - default_value: "50"
 */
struct NumericValue
: private atlas::strong_type_tag
{
    int value{50};

    using atlas_value_type = int;

    static const NumericValue max;

    static const NumericValue min;

    constexpr explicit NumericValue() = default;
    constexpr NumericValue(NumericValue const &) = default;
    constexpr NumericValue(NumericValue &&) = default;
    constexpr NumericValue & operator = (NumericValue const &) = default;
    constexpr NumericValue & operator = (NumericValue &&) = default;
    constexpr ~NumericValue() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit NumericValue(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr NumericValue & operator += (
        NumericValue & lhs,
        NumericValue const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() += std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr NumericValue operator + (
        NumericValue lhs,
        NumericValue const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr NumericValue & operator -= (
        NumericValue & lhs,
        NumericValue const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() -= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr NumericValue operator - (
        NumericValue lhs,
        NumericValue const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        NumericValue const & lhs,
        NumericValue const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};

inline constexpr test::NumericValue test::NumericValue::max = test::NumericValue(100);

inline constexpr test::NumericValue test::NumericValue::min = test::NumericValue(0);
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: test
 * - type_name: NoConstexprType
 * - description: strong int; +, -, ==, no-constexpr
 * - default_value: ""
 */
class NoConstexprType
: private atlas::strong_type_tag
{
    int value;

public:
    using atlas_value_type = int;

    static const NoConstexprType one;

    static const NoConstexprType zero;

    explicit NoConstexprType() = default;
    NoConstexprType(NoConstexprType const &) = default;
    NoConstexprType(NoConstexprType &&) = default;
    NoConstexprType & operator = (NoConstexprType const &) = default;
    NoConstexprType & operator = (NoConstexprType &&) = default;
    ~NoConstexprType() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    explicit NoConstexprType(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    explicit operator int const & () const { return value; }
    explicit operator int & () { return value; }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend NoConstexprType & operator += (
        NoConstexprType & lhs,
        NoConstexprType const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() += std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend NoConstexprType operator + (
        NoConstexprType lhs,
        NoConstexprType const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend NoConstexprType & operator -= (
        NoConstexprType & lhs,
        NoConstexprType const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() -= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend NoConstexprType operator - (
        NoConstexprType lhs,
        NoConstexprType const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend bool operator == (
        NoConstexprType const & lhs,
        NoConstexprType const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }
};

inline const test::NoConstexprType test::NoConstexprType::one = test::NoConstexprType(1);

inline const test::NoConstexprType test::NoConstexprType::zero = test::NoConstexprType(0);
} // namespace test

#endif // TEST_CONSTANTS_85359192D3C5D17564783A5967AC0F3FA9EB40E6

