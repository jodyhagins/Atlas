#ifndef TEST_FA0EF182C0E63834D6251B40594CFCE72694C94F
#define TEST_FA0EF182C0E63834D6251B40594CFCE72694C94F

// ======================================================================
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ----------------------------------------------------------------------
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// This source file has been generated by Atlas Strong Type Generator v0.1.0
// https://github.com/jodyhagins/Atlas
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// ----------------------------------------------------------------------
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ======================================================================

#if __has_include(<version>)
#include <version>
#endif
#include <functional>
#include <string>
#include <type_traits>
#include <utility>
#include <vector>

#ifndef WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90
#define WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90

// ======================================================================
// ATLAS STRONG TYPE BOILERPLATE
// ----------------------------------------------------------------------
//
// This section provides the infrastructure for Atlas strong types.
// It is identical across all Atlas-generated files and uses a shared
// header guard (WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90) to ensure
// the boilerplate is only included once even when multiple generated
// files are used in the same translation unit.
//
// The boilerplate is intentionally inlined to make generated code
// self-contained with zero external dependencies.
//
// Components:
// - atlas::strong_type_tag: Base class for strong types
// - atlas::value(): Universal value accessor for strong types
// - atlas_detail::*: Internal implementation utilities
//
// For projects using multiple Atlas-generated files, this boilerplate
// will only be compiled once per translation unit thanks to the shared
// header guard below.
//
// ----------------------------------------------------------------------
// DO NOT EDIT THIS SECTION
// ======================================================================

// Atlas feature detection macros
#ifndef ATLAS_NODISCARD
#if defined(__cpp_attributes) && __cpp_attributes >= 201603L
#define ATLAS_NODISCARD [[nodiscard]]
#else
#define ATLAS_NODISCARD
#endif
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
#include <compare>
#endif

namespace atlas {

struct strong_type_tag
{
#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    friend auto operator <=> (
        strong_type_tag const &,
        strong_type_tag const &) = default;
#endif
};

struct value_tag
{ };

namespace atlas_detail {

template <typename... Ts>
struct make_void
{
    using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename T, typename = void>
struct IsAtlasType
: std::false_type
{ };

template <typename T>
struct IsAtlasType<T, void_t<typename T::atlas_value_type>>
: std::true_type
{ };

template <std::size_t N>
struct PriorityTag
: PriorityTag<N - 1>
{ };

template <>
struct PriorityTag<0u>
{ };

using value_tag = PriorityTag<3>;

template <bool B>
using bool_c = std::integral_constant<bool, B>;
template <typename T>
using bool_ = bool_c<T::value>;
template <typename T>
using not_ = bool_c<not T::value>;
template <typename T, typename U>
using and_ = bool_c<T::value && U::value>;
template <typename T>
using is_lref = std::is_lvalue_reference<T>;
template <typename T, typename U = void>
using enable_if = typename std::enable_if<T::value, U>::type;

template <typename T>
using _t = typename T::type;

void atlas_value();

template <typename T>
constexpr T &
value(T & val, PriorityTag<0>)
{
    return val;
}

template <typename T, typename U = typename T::atlas_value_type>
using val_t = _t<std::conditional<std::is_const<T>::value, U const &, U &>>;

template <typename T, typename U = val_t<T>>
constexpr auto
value(T & val, PriorityTag<1>)
-> decltype(atlas::atlas_detail::value(static_cast<U>(val), value_tag{}))
{
    return atlas::atlas_detail::value(static_cast<U>(val), value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<2>)
-> decltype(atlas_value(t, atlas::value_tag{}))
{
    return atlas_value(t, atlas::value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<3>)
-> decltype(atlas_value(t))
{
    return atlas_value(t);
}

class Value
{
    template <
        typename U,
        typename T,
        typename V = _t<std::conditional<is_lref<U &&>::value, T &, T>>>
    static constexpr V rval(T && t)
    {
        return t;
    }

public:
    template <typename T>
    constexpr auto operator () (T && t) const
    -> decltype(rval<T>(atlas_detail::value(t, atlas_detail::value_tag{})))
    {
        return rval<T>(atlas_detail::value(t, atlas_detail::value_tag{}));
    }
};

void begin();
void end();

template <typename T>
constexpr auto
begin_(T && t) noexcept(noexcept(begin(std::forward<T>(t))))
-> decltype(begin(std::forward<T>(t)))
{
    return begin(std::forward<T>(t));
}

template <typename T>
constexpr auto
end_(T && t) noexcept(noexcept(end(std::forward<T>(t))))
-> decltype(end(std::forward<T>(t)))
{
    return end(std::forward<T>(t));
}

} // namespace atlas_detail

#if defined(__cpp_inline_variables) && __cpp_inline_variables >= 201606L
inline constexpr auto value = atlas_detail::Value{};
#else
template <typename T>
constexpr auto
value(T && t)
-> decltype(atlas_detail::Value{}(std::forward<T>(t)))
{
    return atlas_detail::Value{}(std::forward<T>(t));
}
#endif

} // namespace atlas

#endif // WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////


namespace test {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: StringWrapper
 * - description: std::string; forward=size,empty,clear; hash
 * - default_value: ""
 */
struct StringWrapper
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit StringWrapper() = default;
    constexpr StringWrapper(StringWrapper const &) = default;
    constexpr StringWrapper(StringWrapper &&) = default;
    constexpr StringWrapper & operator = (StringWrapper const &) = default;
    constexpr StringWrapper & operator = (StringWrapper &&) = default;
    constexpr ~StringWrapper() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit StringWrapper(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward clear to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * clear member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto clear(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.clear(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.clear(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.clear(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif
};
} // namespace test


/**
 * @brief std::hash specialization for test::StringWrapper
 *
 * Delegates to std::hash of the underlying type std::string
 */
template <>
struct std::hash<test::StringWrapper>
{
    ATLAS_NODISCARD
    constexpr std::size_t operator () (test::StringWrapper const & t) const
    noexcept(
        noexcept(std::hash<std::string>{}(
            std::declval<std::string const &>())))
    {
        return std::hash<std::string>{}(
            static_cast<std::string const &>(t));
    }
};

namespace test {

/**
 * @brief Strong type wrapper for std::vector<int>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: VectorWrapper
 * - description: std::vector<int>; forward=size,empty,begin,end; !=, ==, iterable
 * - default_value: ""
 */
struct VectorWrapper
: private atlas::strong_type_tag
{
    std::vector<int> value;

    using atlas_value_type = std::vector<int>;

    constexpr explicit VectorWrapper() = default;
    constexpr VectorWrapper(VectorWrapper const &) = default;
    constexpr VectorWrapper(VectorWrapper &&) = default;
    constexpr VectorWrapper & operator = (VectorWrapper const &) = default;
    constexpr VectorWrapper & operator = (VectorWrapper &&) = default;
    constexpr ~VectorWrapper() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::vector<int>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit VectorWrapper(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::vector<int> const & () const { return value; }
    constexpr explicit operator std::vector<int> & () { return value; }

    /**
     * Iterator type aliases for container-like interface.
     */
    using iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<int>&>()));
    using const_iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<int> const&>()));
    using value_type = typename std::remove_reference<decltype(
        *atlas::atlas_detail::begin_(
            std::declval<std::vector<int>&>()))>::type;

    /**
     * Member functions for iterator access.
     * Enables both explicit calls (e.g., s.begin()) and range-based for loops.
     * Uses ADL-enabled helpers that work in decltype/noexcept contexts.
     */
    constexpr auto begin()
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end()
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    constexpr auto begin() const
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end() const
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    /**
     * @brief Forward begin to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * begin member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto begin(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.begin(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.begin(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.begin(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto begin(Args&&... args) const &
    noexcept(noexcept(value.begin(std::forward<Args>(args)...)))
    -> decltype(value.begin(std::forward<Args>(args)...))
    {
        return value.begin(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto begin(Args&&... args) const &&
    noexcept(noexcept(std::move(value).begin(std::forward<Args>(args)...)))
    -> decltype(std::move(value).begin(std::forward<Args>(args)...))
    {
        return std::move(value).begin(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto begin(Args&&... args) &
    noexcept(noexcept(value.begin(std::forward<Args>(args)...)))
    -> decltype(value.begin(std::forward<Args>(args)...))
    {
        return value.begin(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto begin(Args&&... args) &&
    noexcept(noexcept(std::move(value).begin(std::forward<Args>(args)...)))
    -> decltype(std::move(value).begin(std::forward<Args>(args)...))
    {
        return std::move(value).begin(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward end to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * end member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto end(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.end(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.end(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.end(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto end(Args&&... args) const &
    noexcept(noexcept(value.end(std::forward<Args>(args)...)))
    -> decltype(value.end(std::forward<Args>(args)...))
    {
        return value.end(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto end(Args&&... args) const &&
    noexcept(noexcept(std::move(value).end(std::forward<Args>(args)...)))
    -> decltype(std::move(value).end(std::forward<Args>(args)...))
    {
        return std::move(value).end(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto end(Args&&... args) &
    noexcept(noexcept(value.end(std::forward<Args>(args)...)))
    -> decltype(value.end(std::forward<Args>(args)...))
    {
        return value.end(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto end(Args&&... args) &&
    noexcept(noexcept(std::move(value).end(std::forward<Args>(args)...)))
    -> decltype(std::move(value).end(std::forward<Args>(args)...))
    {
        return std::move(value).end(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        VectorWrapper const & lhs,
        VectorWrapper const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() != std::declval<std::vector<int> const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        VectorWrapper const & lhs,
        VectorWrapper const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() == std::declval<std::vector<int> const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: StringWithExtra
 * - description: std::string; forward=length,size,empty,clear; ==
 * - default_value: ""
 */
struct StringWithExtra
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit StringWithExtra() = default;
    constexpr StringWithExtra(StringWithExtra const &) = default;
    constexpr StringWithExtra(StringWithExtra &&) = default;
    constexpr StringWithExtra & operator = (StringWithExtra const &) = default;
    constexpr StringWithExtra & operator = (StringWithExtra &&) = default;
    constexpr ~StringWithExtra() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit StringWithExtra(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward clear to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * clear member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto clear(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.clear(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.clear(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.clear(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward length to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * length member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto length(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.length(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.length(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.length(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto length(Args&&... args) const &
    noexcept(noexcept(value.length(std::forward<Args>(args)...)))
    -> decltype(value.length(std::forward<Args>(args)...))
    {
        return value.length(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) const &&
    noexcept(noexcept(std::move(value).length(std::forward<Args>(args)...)))
    -> decltype(std::move(value).length(std::forward<Args>(args)...))
    {
        return std::move(value).length(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &
    noexcept(noexcept(value.length(std::forward<Args>(args)...)))
    -> decltype(value.length(std::forward<Args>(args)...))
    {
        return value.length(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &&
    noexcept(noexcept(std::move(value).length(std::forward<Args>(args)...)))
    -> decltype(std::move(value).length(std::forward<Args>(args)...))
    {
        return std::move(value).length(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        StringWithExtra const & lhs,
        StringWithExtra const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for std::vector<int>
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: ContainerWithComparison
 * - description: std::vector<int>; forward=size,empty,begin,end; !=, <, <=, ==, >, >=, iterable
 * - default_value: ""
 */
struct ContainerWithComparison
: private atlas::strong_type_tag
{
    std::vector<int> value;

    using atlas_value_type = std::vector<int>;

    constexpr explicit ContainerWithComparison() = default;
    constexpr ContainerWithComparison(ContainerWithComparison const &) = default;
    constexpr ContainerWithComparison(ContainerWithComparison &&) = default;
    constexpr ContainerWithComparison & operator = (ContainerWithComparison const &) = default;
    constexpr ContainerWithComparison & operator = (ContainerWithComparison &&) = default;
    constexpr ~ContainerWithComparison() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::vector<int>, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ContainerWithComparison(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::vector<int> const & () const { return value; }
    constexpr explicit operator std::vector<int> & () { return value; }

    /**
     * Iterator type aliases for container-like interface.
     */
    using iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<int>&>()));
    using const_iterator = decltype(atlas::atlas_detail::begin_(
        std::declval<std::vector<int> const&>()));
    using value_type = typename std::remove_reference<decltype(
        *atlas::atlas_detail::begin_(
            std::declval<std::vector<int>&>()))>::type;

    /**
     * Member functions for iterator access.
     * Enables both explicit calls (e.g., s.begin()) and range-based for loops.
     * Uses ADL-enabled helpers that work in decltype/noexcept contexts.
     */
    constexpr auto begin()
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end()
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    constexpr auto begin() const
    noexcept(noexcept(atlas::atlas_detail::begin_(value)))
    -> decltype(atlas::atlas_detail::begin_(value))
    {
        return atlas::atlas_detail::begin_(value);
    }

    constexpr auto end() const
    noexcept(noexcept(atlas::atlas_detail::end_(value)))
    -> decltype(atlas::atlas_detail::end_(value))
    {
        return atlas::atlas_detail::end_(value);
    }

    /**
     * @brief Forward begin to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * begin member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto begin(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.begin(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.begin(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.begin(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto begin(Args&&... args) const &
    noexcept(noexcept(value.begin(std::forward<Args>(args)...)))
    -> decltype(value.begin(std::forward<Args>(args)...))
    {
        return value.begin(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto begin(Args&&... args) const &&
    noexcept(noexcept(std::move(value).begin(std::forward<Args>(args)...)))
    -> decltype(std::move(value).begin(std::forward<Args>(args)...))
    {
        return std::move(value).begin(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto begin(Args&&... args) &
    noexcept(noexcept(value.begin(std::forward<Args>(args)...)))
    -> decltype(value.begin(std::forward<Args>(args)...))
    {
        return value.begin(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto begin(Args&&... args) &&
    noexcept(noexcept(std::move(value).begin(std::forward<Args>(args)...)))
    -> decltype(std::move(value).begin(std::forward<Args>(args)...))
    {
        return std::move(value).begin(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward end to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * end member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto end(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.end(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.end(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.end(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto end(Args&&... args) const &
    noexcept(noexcept(value.end(std::forward<Args>(args)...)))
    -> decltype(value.end(std::forward<Args>(args)...))
    {
        return value.end(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto end(Args&&... args) const &&
    noexcept(noexcept(std::move(value).end(std::forward<Args>(args)...)))
    -> decltype(std::move(value).end(std::forward<Args>(args)...))
    {
        return std::move(value).end(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto end(Args&&... args) &
    noexcept(noexcept(value.end(std::forward<Args>(args)...)))
    -> decltype(value.end(std::forward<Args>(args)...))
    {
        return value.end(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto end(Args&&... args) &&
    noexcept(noexcept(std::move(value).end(std::forward<Args>(args)...)))
    -> decltype(std::move(value).end(std::forward<Args>(args)...))
    {
        return std::move(value).end(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        ContainerWithComparison const & lhs,
        ContainerWithComparison const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() != std::declval<std::vector<int> const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        ContainerWithComparison const & lhs,
        ContainerWithComparison const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() < std::declval<std::vector<int> const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        ContainerWithComparison const & lhs,
        ContainerWithComparison const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() <= std::declval<std::vector<int> const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ContainerWithComparison const & lhs,
        ContainerWithComparison const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() == std::declval<std::vector<int> const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        ContainerWithComparison const & lhs,
        ContainerWithComparison const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() > std::declval<std::vector<int> const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        ContainerWithComparison const & lhs,
        ContainerWithComparison const & rhs)
    noexcept(noexcept(std::declval<std::vector<int> const&>() >= std::declval<std::vector<int> const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: ComparisonOnly
 * - description: int; !=, <, <=, ==, >, >=
 * - default_value: ""
 */
struct ComparisonOnly
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    constexpr explicit ComparisonOnly() = default;
    constexpr ComparisonOnly(ComparisonOnly const &) = default;
    constexpr ComparisonOnly(ComparisonOnly &&) = default;
    constexpr ComparisonOnly & operator = (ComparisonOnly const &) = default;
    constexpr ComparisonOnly & operator = (ComparisonOnly &&) = default;
    constexpr ~ComparisonOnly() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ComparisonOnly(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        ComparisonOnly const & lhs,
        ComparisonOnly const & rhs)
    noexcept(noexcept(std::declval<int const&>() != std::declval<int const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        ComparisonOnly const & lhs,
        ComparisonOnly const & rhs)
    noexcept(noexcept(std::declval<int const&>() < std::declval<int const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value <= @p rhs.value?
     */
    friend constexpr bool operator <= (
        ComparisonOnly const & lhs,
        ComparisonOnly const & rhs)
    noexcept(noexcept(std::declval<int const&>() <= std::declval<int const&>()))
    {
        return lhs.value <= rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ComparisonOnly const & lhs,
        ComparisonOnly const & rhs)
    noexcept(noexcept(std::declval<int const&>() == std::declval<int const&>()))
    {
        return lhs.value == rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        ComparisonOnly const & lhs,
        ComparisonOnly const & rhs)
    noexcept(noexcept(std::declval<int const&>() > std::declval<int const&>()))
    {
        return lhs.value > rhs.value;
    }

    /**
     * Is @p lhs.value >= @p rhs.value?
     */
    friend constexpr bool operator >= (
        ComparisonOnly const & lhs,
        ComparisonOnly const & rhs)
    noexcept(noexcept(std::declval<int const&>() >= std::declval<int const&>()))
    {
        return lhs.value >= rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: AliasedWrapper
 * - description: std::string; forward=size:length,empty:is_empty; ==
 * - default_value: ""
 */
struct AliasedWrapper
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit AliasedWrapper() = default;
    constexpr AliasedWrapper(AliasedWrapper const &) = default;
    constexpr AliasedWrapper(AliasedWrapper &&) = default;
    constexpr AliasedWrapper & operator = (AliasedWrapper const &) = default;
    constexpr AliasedWrapper & operator = (AliasedWrapper &&) = default;
    constexpr ~AliasedWrapper() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit AliasedWrapper(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward empty to wrapped object (aliased as is_empty)
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto is_empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object (aliased as length)
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto length(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto length(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        AliasedWrapper const & lhs,
        AliasedWrapper const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: ImmutableWrapper
 * - description: std::string; forward=const,size,empty; ==
 * - default_value: ""
 */
struct ImmutableWrapper
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit ImmutableWrapper() = default;
    constexpr ImmutableWrapper(ImmutableWrapper const &) = default;
    constexpr ImmutableWrapper(ImmutableWrapper &&) = default;
    constexpr ImmutableWrapper & operator = (ImmutableWrapper const &) = default;
    constexpr ImmutableWrapper & operator = (ImmutableWrapper &&) = default;
    constexpr ~ImmutableWrapper() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit ImmutableWrapper(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto empty(Args&&... args) const
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto size(Args&&... args) const
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }





    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        ImmutableWrapper const & lhs,
        ImmutableWrapper const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: MixedForwarding
 * - description: std::string; forward=substr:substring,size:length,empty:is_empty,size,empty,clear; !=, ==
 * - default_value: ""
 */
struct MixedForwarding
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit MixedForwarding() = default;
    constexpr MixedForwarding(MixedForwarding const &) = default;
    constexpr MixedForwarding(MixedForwarding &&) = default;
    constexpr MixedForwarding & operator = (MixedForwarding const &) = default;
    constexpr MixedForwarding & operator = (MixedForwarding &&) = default;
    constexpr ~MixedForwarding() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit MixedForwarding(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward clear to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * clear member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto clear(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.clear(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.clear(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.clear(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) const &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto clear(Args&&... args) &&
    noexcept(noexcept(std::move(value).clear(std::forward<Args>(args)...)))
    -> decltype(std::move(value).clear(std::forward<Args>(args)...))
    {
        return std::move(value).clear(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward empty to wrapped object (aliased as is_empty)
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto is_empty(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.empty(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.empty(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.empty(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) &
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto is_empty(Args&&... args) &&
    noexcept(noexcept(std::move(value).empty(std::forward<Args>(args)...)))
    -> decltype(std::move(value).empty(std::forward<Args>(args)...))
    {
        return std::move(value).empty(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object (aliased as length)
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto length(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto length(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto length(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto size(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.size(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.size(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.size(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto size(Args&&... args) const &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) const &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto size(Args&&... args) &&
    noexcept(noexcept(std::move(value).size(std::forward<Args>(args)...)))
    -> decltype(std::move(value).size(std::forward<Args>(args)...))
    {
        return std::move(value).size(std::forward<Args>(args)...);
    }
#endif

    /**
     * @brief Forward substr to wrapped object (aliased as substring)
     *
     * This member function forwards all calls to the underlying type's
     * substr member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto substring(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.substr(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.substr(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.substr(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto substring(Args&&... args) const &
    noexcept(noexcept(value.substr(std::forward<Args>(args)...)))
    -> decltype(value.substr(std::forward<Args>(args)...))
    {
        return value.substr(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto substring(Args&&... args) const &&
    noexcept(noexcept(std::move(value).substr(std::forward<Args>(args)...)))
    -> decltype(std::move(value).substr(std::forward<Args>(args)...))
    {
        return std::move(value).substr(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto substring(Args&&... args) &
    noexcept(noexcept(value.substr(std::forward<Args>(args)...)))
    -> decltype(value.substr(std::forward<Args>(args)...))
    {
        return value.substr(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto substring(Args&&... args) &&
    noexcept(noexcept(std::move(value).substr(std::forward<Args>(args)...)))
    -> decltype(std::move(value).substr(std::forward<Args>(args)...))
    {
        return std::move(value).substr(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        MixedForwarding const & lhs,
        MixedForwarding const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        MixedForwarding const & lhs,
        MixedForwarding const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace test


namespace test {

/**
 * @brief Strong type wrapper for std::string
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: test
 * - type_name: MixedForwardingConst
 * - description: std::string; forward=substr:substring,const,size:length,empty:is_empty,size,empty,clear; !=, ==
 * - default_value: ""
 */
struct MixedForwardingConst
: private atlas::strong_type_tag
{
    std::string value;

    using atlas_value_type = std::string;

    constexpr explicit MixedForwardingConst() = default;
    constexpr MixedForwardingConst(MixedForwardingConst const &) = default;
    constexpr MixedForwardingConst(MixedForwardingConst &&) = default;
    constexpr MixedForwardingConst & operator = (MixedForwardingConst const &) = default;
    constexpr MixedForwardingConst & operator = (MixedForwardingConst &&) = default;
    constexpr ~MixedForwardingConst() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<std::string, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit MixedForwardingConst(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator std::string const & () const { return value; }
    constexpr explicit operator std::string & () { return value; }

    /**
     * @brief Forward clear to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * clear member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto clear(Args&&... args) const
    noexcept(noexcept(value.clear(std::forward<Args>(args)...)))
    -> decltype(value.clear(std::forward<Args>(args)...))
    {
        return value.clear(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward empty to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto empty(Args&&... args) const
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward empty to wrapped object (aliased as is_empty)
     *
     * This member function forwards all calls to the underlying type's
     * empty member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto is_empty(Args&&... args) const
    noexcept(noexcept(value.empty(std::forward<Args>(args)...)))
    -> decltype(value.empty(std::forward<Args>(args)...))
    {
        return value.empty(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward size to wrapped object (aliased as length)
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto length(Args&&... args) const
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward size to wrapped object
     *
     * This member function forwards all calls to the underlying type's
     * size member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     * Only const overloads are generated.
     */
    // C++11-20: ref-qualified overloads (or just const for const-only)
    template <typename... Args>
    constexpr auto size(Args&&... args) const
    noexcept(noexcept(value.size(std::forward<Args>(args)...)))
    -> decltype(value.size(std::forward<Args>(args)...))
    {
        return value.size(std::forward<Args>(args)...);
    }





    /**
     * @brief Forward substr to wrapped object (aliased as substring)
     *
     * This member function forwards all calls to the underlying type's
     * substr member function, preserving const-correctness,
     * noexcept specifications, and perfect forwarding.
     */
#if defined(__cpp_explicit_this_parameter) && __cpp_explicit_this_parameter >= 202110L
    // C++23 deducing this - single elegant overload
    template <typename Self, typename... Args>
    constexpr auto substring(this Self&& self, Args&&... args)
    noexcept(noexcept(std::forward<Self>(self).value.substr(std::forward<Args>(args)...)))
    -> decltype(std::forward<Self>(self).value.substr(std::forward<Args>(args)...))
    {
        return std::forward<Self>(self).value.substr(std::forward<Args>(args)...);
    }
#else
    // C++11-20: ref-qualified overloads (or just const for const-only)

    template <typename... Args>
    constexpr auto substring(Args&&... args) const &
    noexcept(noexcept(value.substr(std::forward<Args>(args)...)))
    -> decltype(value.substr(std::forward<Args>(args)...))
    {
        return value.substr(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto substring(Args&&... args) const &&
    noexcept(noexcept(std::move(value).substr(std::forward<Args>(args)...)))
    -> decltype(std::move(value).substr(std::forward<Args>(args)...))
    {
        return std::move(value).substr(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto substring(Args&&... args) &
    noexcept(noexcept(value.substr(std::forward<Args>(args)...)))
    -> decltype(value.substr(std::forward<Args>(args)...))
    {
        return value.substr(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr auto substring(Args&&... args) &&
    noexcept(noexcept(std::move(value).substr(std::forward<Args>(args)...)))
    -> decltype(std::move(value).substr(std::forward<Args>(args)...))
    {
        return std::move(value).substr(std::forward<Args>(args)...);
    }
#endif

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        MixedForwardingConst const & lhs,
        MixedForwardingConst const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() != std::declval<std::string const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        MixedForwardingConst const & lhs,
        MixedForwardingConst const & rhs)
    noexcept(noexcept(std::declval<std::string const&>() == std::declval<std::string const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace test

#endif // TEST_FA0EF182C0E63834D6251B40594CFCE72694C94F

