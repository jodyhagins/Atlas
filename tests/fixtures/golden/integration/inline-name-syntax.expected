#ifndef TEST_E56342C7FBA2EFE1C953E32DEDFD3313D55E6212
#define TEST_E56342C7FBA2EFE1C953E32DEDFD3313D55E6212

// ======================================================================
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ----------------------------------------------------------------------
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// This source file has been generated by Atlas Strong Type Generator v0.1.0
// https://github.com/jodyhagins/Atlas
//
// DO NOT EDIT THIS FILE DIRECTLY.
//
// ----------------------------------------------------------------------
// NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE  NOTICE
// ======================================================================

#if __has_include(<version>)
#include <version>
#endif
#include <type_traits>
#include <utility>

#ifndef WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90
#define WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90

// ======================================================================
// ATLAS STRONG TYPE BOILERPLATE
// ----------------------------------------------------------------------
//
// This section provides the infrastructure for Atlas strong types.
// It is identical across all Atlas-generated files and uses a shared
// header guard (WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90) to ensure
// the boilerplate is only included once even when multiple generated
// files are used in the same translation unit.
//
// The boilerplate is intentionally inlined to make generated code
// self-contained with zero external dependencies.
//
// Components:
// - atlas::strong_type_tag: Base class for strong types
// - atlas::value(): Universal value accessor for strong types
// - atlas_detail::*: Internal implementation utilities
//
// For projects using multiple Atlas-generated files, this boilerplate
// will only be compiled once per translation unit thanks to the shared
// header guard below.
//
// ----------------------------------------------------------------------
// DO NOT EDIT THIS SECTION
// ======================================================================

// Atlas feature detection macros
#ifndef ATLAS_NODISCARD
#if defined(__cpp_attributes) && __cpp_attributes >= 201603L
#define ATLAS_NODISCARD [[nodiscard]]
#else
#define ATLAS_NODISCARD
#endif
#endif

#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
#include <compare>
#endif
#include <type_traits>
#include <utility>

namespace atlas {

struct strong_type_tag
{
#if defined(__cpp_impl_three_way_comparison) && \
    __cpp_impl_three_way_comparison >= 201907L
    friend auto operator <=> (
        strong_type_tag const &,
        strong_type_tag const &) = default;
#endif
};

struct value_tag
{ };

namespace atlas_detail {

template <typename... Ts>
struct make_void
{
    using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename T, typename = void>
struct IsAtlasType
: std::false_type
{ };

template <typename T>
struct IsAtlasType<T, void_t<typename T::atlas_value_type>>
: std::true_type
{ };

template <std::size_t N>
struct PriorityTag
: PriorityTag<N - 1>
{ };

template <>
struct PriorityTag<0u>
{ };

using value_tag = PriorityTag<3>;

template <bool B>
using bool_c = std::integral_constant<bool, B>;
template <typename T>
using bool_ = bool_c<T::value>;
template <typename T>
using not_ = bool_c<not T::value>;
template <typename T, typename U>
using and_ = bool_c<T::value && U::value>;
template <typename T>
using is_lref = std::is_lvalue_reference<T>;
template <typename T, typename U = void>
using enable_if = typename std::enable_if<T::value, U>::type;

template <typename T>
using _t = typename T::type;

void atlas_value();

template <typename T>
constexpr T &
value(T & val, PriorityTag<0>)
{
    return val;
}

template <typename T, typename U = typename T::atlas_value_type>
using val_t = _t<std::conditional<std::is_const<T>::value, U const &, U &>>;

template <typename T, typename U = val_t<T>>
constexpr auto
value(T & val, PriorityTag<1>)
-> decltype(atlas::atlas_detail::value(static_cast<U>(val), value_tag{}))
{
    return atlas::atlas_detail::value(static_cast<U>(val), value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<2>)
-> decltype(atlas_value(t, atlas::value_tag{}))
{
    return atlas_value(t, atlas::value_tag{});
}

template <typename T>
constexpr auto
value(T const & t, PriorityTag<3>)
-> decltype(atlas_value(t))
{
    return atlas_value(t);
}

class Value
{
    template <
        typename U,
        typename T,
        typename V = _t<std::conditional<is_lref<U &&>::value, T &, T>>>
    static constexpr V rval(T && t)
    {
        return t;
    }

public:
    template <typename T>
    constexpr auto operator () (T && t) const
    -> decltype(rval<T>(atlas_detail::value(t, atlas_detail::value_tag{})))
    {
        return rval<T>(atlas_detail::value(t, atlas_detail::value_tag{}));
    }
};

void begin();
void end();

template <typename T>
constexpr auto
begin_(T && t) noexcept(noexcept(begin(std::forward<T>(t))))
-> decltype(begin(std::forward<T>(t)))
{
    return begin(std::forward<T>(t));
}

template <typename T>
constexpr auto
end_(T && t) noexcept(noexcept(end(std::forward<T>(t))))
-> decltype(end(std::forward<T>(t)))
{
    return end(std::forward<T>(t));
}

} // namespace atlas_detail

#if defined(__cpp_inline_variables) && __cpp_inline_variables >= 201606L
inline constexpr auto value = atlas_detail::Value{};
#else
template <typename T>
constexpr auto
value(T && t)
-> decltype(atlas_detail::Value{}(std::forward<T>(t)))
{
    return atlas_detail::Value{}(std::forward<T>(t));
}
#endif

} // namespace atlas

#endif // WJH_ATLAS_50E620B544874CB8BE4412EE6773BF90


//////////////////////////////////////////////////////////////////////
///
/// These are the droids you are looking for!
///
//////////////////////////////////////////////////////////////////////


namespace global {
namespace ns {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: global::ns
 * - type_name: Price
 * - description: strong double; +, -, ==
 * - default_value: ""
 */
struct Price
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    constexpr explicit Price() = default;
    constexpr Price(Price const &) = default;
    constexpr Price(Price &&) = default;
    constexpr Price & operator = (Price const &) = default;
    constexpr Price & operator = (Price &&) = default;
    constexpr ~Price() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Price(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Price & operator += (
        Price & lhs,
        Price const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Price operator + (
        Price lhs,
        Price const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Price & operator -= (
        Price & lhs,
        Price const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Price operator - (
        Price lhs,
        Price const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Price const & lhs,
        Price const & rhs)
    noexcept(noexcept(std::declval<double const&>() == std::declval<double const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace ns
} // namespace global


namespace demo {
namespace profiles {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: demo::profiles
 * - type_name: Quantity
 * - description: strong int; *, +, -
 * - default_value: ""
 */
struct Quantity
: private atlas::strong_type_tag
{
    int value;

    using atlas_value_type = int;

    constexpr explicit Quantity() = default;
    constexpr Quantity(Quantity const &) = default;
    constexpr Quantity(Quantity &&) = default;
    constexpr Quantity & operator = (Quantity const &) = default;
    constexpr Quantity & operator = (Quantity &&) = default;
    constexpr ~Quantity() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Quantity(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * Apply * assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator *= (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() *= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value *= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator * to the wrapped object.
     */
    friend constexpr Quantity operator * (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs *= rhs))
    {
        lhs *= rhs;
        return lhs;
    }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator += (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() += std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Quantity operator + (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Quantity & operator -= (
        Quantity & lhs,
        Quantity const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<int &>() -= std::declval<int const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Quantity operator - (
        Quantity lhs,
        Quantity const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }
};
} // namespace profiles
} // namespace demo


namespace global {
namespace ns {

/**
 * @brief Strong type wrapper for double
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: global::ns
 * - type_name: Volume
 * - description: strong double; +, -
 * - default_value: ""
 */
struct Volume
: private atlas::strong_type_tag
{
    double value;

    using atlas_value_type = double;

    constexpr explicit Volume() = default;
    constexpr Volume(Volume const &) = default;
    constexpr Volume(Volume &&) = default;
    constexpr Volume & operator = (Volume const &) = default;
    constexpr Volume & operator = (Volume &&) = default;
    constexpr ~Volume() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<double, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Volume(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator double const & () const { return value; }
    constexpr explicit operator double & () { return value; }

    /**
     * Apply + assignment to the wrapped objects.
     */
    friend constexpr Volume & operator += (
        Volume & lhs,
        Volume const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() += std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value += rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator + to the wrapped object.
     */
    friend constexpr Volume operator + (
        Volume lhs,
        Volume const & rhs)
    noexcept(noexcept(lhs += rhs))
    {
        lhs += rhs;
        return lhs;
    }

    /**
     * Apply - assignment to the wrapped objects.
     */
    friend constexpr Volume & operator -= (
        Volume & lhs,
        Volume const & rhs)
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunevaluated-expression"
#endif
    noexcept(noexcept(std::declval<double &>() -= std::declval<double const &>()))
#if defined(__clang__)
#pragma clang diagnostic pop
#endif
    {
        lhs.value -= rhs.value;
        return lhs;
    }
    /**
     * Apply the binary operator - to the wrapped object.
     */
    friend constexpr Volume operator - (
        Volume lhs,
        Volume const & rhs)
    noexcept(noexcept(lhs -= rhs))
    {
        lhs -= rhs;
        return lhs;
    }
};
} // namespace ns
} // namespace global


namespace finance {

/**
 * @brief Strong type wrapper for int
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: class
 * - type_namespace: finance
 * - type_name: Currency
 * - description: strong int; !=, <=>, ==
 * - default_value: ""
 */
class Currency
: private atlas::strong_type_tag
{
    int value;

public:
    using atlas_value_type = int;

    constexpr explicit Currency() = default;
    constexpr Currency(Currency const &) = default;
    constexpr Currency(Currency &&) = default;
    constexpr Currency & operator = (Currency const &) = default;
    constexpr Currency & operator = (Currency &&) = default;
    constexpr ~Currency() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<int, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Currency(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator int const & () const { return value; }
    constexpr explicit operator int & () { return value; }

    /**
     * The default three-way comparison (spaceship) operator.
     */
    friend constexpr auto operator <=> (
        Currency const &,
        Currency const &) = default;

    /**
     * The default equality comparison operator.
     * Provided with spaceship operator for optimal performance.
     */
    friend constexpr bool operator == (
        Currency const &,
        Currency const &) = default;
};
} // namespace finance


namespace a {
namespace b {
namespace c {
namespace d {

/**
 * @brief Strong type wrapper for unsigned long
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: a::b::c::d
 * - type_name: Type
 * - description: strong unsigned long; !=, ==
 * - default_value: ""
 */
struct Type
: private atlas::strong_type_tag
{
    unsigned long value;

    using atlas_value_type = unsigned long;

    constexpr explicit Type() = default;
    constexpr Type(Type const &) = default;
    constexpr Type(Type &&) = default;
    constexpr Type & operator = (Type const &) = default;
    constexpr Type & operator = (Type &&) = default;
    constexpr ~Type() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<unsigned long, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit Type(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator unsigned long const & () const { return value; }
    constexpr explicit operator unsigned long & () { return value; }

    /**
     * Is @p lhs.value != @p rhs.value?
     */
    friend constexpr bool operator != (
        Type const & lhs,
        Type const & rhs)
    noexcept(noexcept(std::declval<unsigned long const&>() != std::declval<unsigned long const&>()))
    {
        return lhs.value != rhs.value;
    }

    /**
     * Is @p lhs.value == @p rhs.value?
     */
    friend constexpr bool operator == (
        Type const & lhs,
        Type const & rhs)
    noexcept(noexcept(std::declval<unsigned long const&>() == std::declval<unsigned long const&>()))
    {
        return lhs.value == rhs.value;
    }
};
} // namespace d
} // namespace c
} // namespace b
} // namespace a


namespace legacy {

/**
 * @brief Strong type wrapper for float
 *
 * Generated by Atlas Strong Type Generator.
 * Generation parameters:
 * - kind: struct
 * - type_namespace: legacy
 * - type_name: OldStyle
 * - description: strong float; <, >
 * - default_value: ""
 */
struct OldStyle
: private atlas::strong_type_tag
{
    float value;

    using atlas_value_type = float;

    constexpr explicit OldStyle() = default;
    constexpr OldStyle(OldStyle const &) = default;
    constexpr OldStyle(OldStyle &&) = default;
    constexpr OldStyle & operator = (OldStyle const &) = default;
    constexpr OldStyle & operator = (OldStyle &&) = default;
    constexpr ~OldStyle() = default;

    template <
        typename... ArgTs,
        typename std::enable_if<
            std::is_constructible<float, ArgTs...>::value,
            bool>::type = true>
    constexpr explicit OldStyle(ArgTs && ... args)
    : value(std::forward<ArgTs>(args)...)
    { }

    /**
     * The explicit cast operator provides a reference to the wrapped object.
     */
    constexpr explicit operator float const & () const { return value; }
    constexpr explicit operator float & () { return value; }

    /**
     * Is @p lhs.value < @p rhs.value?
     */
    friend constexpr bool operator < (
        OldStyle const & lhs,
        OldStyle const & rhs)
    noexcept(noexcept(std::declval<float const&>() < std::declval<float const&>()))
    {
        return lhs.value < rhs.value;
    }

    /**
     * Is @p lhs.value > @p rhs.value?
     */
    friend constexpr bool operator > (
        OldStyle const & lhs,
        OldStyle const & rhs)
    noexcept(noexcept(std::declval<float const&>() > std::declval<float const&>()))
    {
        return lhs.value > rhs.value;
    }
};
} // namespace legacy

#endif // TEST_E56342C7FBA2EFE1C953E32DEDFD3313D55E6212

